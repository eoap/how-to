{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the CWL How-To Guides","text":"<p>The Common Workflow Language (CWL) is a standard for describing data analysis workflows.</p> <p>This collection of how-to guides provides step-by-step instructions to help EO Application Packages developer achieve their goals.</p>"},{"location":"#what-youll-learn","title":"What you'll Learn","text":"<p>These guides are structured to address common use cases and challenges encountered when working with CWL. </p> <p>You'll find practical solutions for tasks such as:</p> <ul> <li>Creating nested workflows for modular design.</li> <li>Using scattering to process multiple inputs in parallel.</li> <li>Building conditional workflows that adapt dynamically to inputs.</li> <li>Setting up environment variables for runtime configuration.</li> <li>Capturing and processing outputs, including JSON and files.</li> </ul> <p>Each guide focuses on specific CWL features, providing clear explanations and actionable examples to help you apply the concepts in your EO Application Packages.</p>"},{"location":"#who-are-these-guides-for","title":"Who Are These Guides For?","text":"<ul> <li>Beginners: Start with foundational guides that introduce key CWL concepts.</li> <li>Intermediate Users: Learn advanced techniques like scattering and conditional workflows.</li> <li>Experts: Discover ways to optimize and modularize complex workflows.</li> </ul>"},{"location":"#how-to-use-these-guides","title":"How to Use These Guides","text":"<ul> <li>Identify Your Goal: Each guide is tailored to a specific task or feature in CWL. Browse the list to find the topic you need.</li> <li>Follow Step-by-Step Instructions: Every guide includes a practical example, detailed steps, and explanations of the concepts involved.</li> <li>Apply and Experiment: Use the examples to build and refine your workflows. Modify the samples to fit your unique requirements.</li> </ul>"},{"location":"#get-started","title":"Get Started","text":"<p>Explore the guides below and take your CWL skills to the next level. Whether you\u2019re automating data analysis, building reproducible pipelines, or integrating workflows with existing tools, these how-to guides are your companion for success with CWL!</p>"},{"location":"capture-json-stdout/","title":"How-to Guide: Capturing JSON from stdout and Reusing It in Another CWL Tool","text":"<pre>stdout: message\n</pre> <pre>outputs:\n</pre> <pre>  asset:\n</pre> <pre>    type: Any\n</pre> <pre>    outputBinding:\n</pre> <pre>      glob: message\n</pre> <pre>      loadContents: true\n</pre> <pre>      outputEval: ${ return JSON.parse(self[0].contents).assets; }\n</pre> <ol> <li>Reusing captured JSON in another tool:</li> </ol> <pre>arguments:\n</pre> <pre>  - valueFrom: \"${\\n    let redKey = Object.keys(inputs.asset).find(key =&gt; \\n        inputs.asset[key]['eo:bands'] &amp;&amp; \\n        inputs.asset[key]['eo:bands'].length === 1 &amp;&amp;\\n        inputs.asset[key]['eo:bands'].some(band =&gt; band.common_name === inputs.common_band_name)\\n    );\\n    return inputs.asset[redKey].href;\\n}\\n\"\n</pre> <pre>  - valueFrom: |\n</pre> <pre>      ${\n</pre> <pre>          return inputs.common_band_name + \".png\";\n</pre> <pre>      }\n</pre> <pre>\n</pre> <pre>stdout: message\n</pre> <pre>outputs:\n</pre> <pre>  asset:\n</pre> <pre>    type: Any\n</pre> <pre>    outputBinding:\n</pre> <pre>      glob: message\n</pre> <pre>      loadContents: true\n</pre> <pre>      outputEval: ${ return JSON.parse(self[0].contents).assets; }\n</pre> <ul> <li><code>stdout: message</code>: Redirects the tool's <code>stdout</code> to a file named <code>message</code>.</li> <li><code>glob: message</code>: Locates the <code>message</code> file.</li> <li><code>loadContents: true</code>: Reads the content of the file into memory.</li> <li><code>outputEval</code>: Parses the JSON content to extract the <code>assets</code> field using JavaScript (<code>JSON.parse</code>).</li> </ul> <p>How It Works</p> <ul> <li>The <code>stac</code> tool fetches a STAC item as JSON using <code>curl</code>.</li> <li>The output (<code>stdout</code>) is saved to <code>message</code>.</li> <li>The <code>outputs</code> block processes this JSON and makes the <code>assets</code> field available for downstream steps.</li> </ul> <ol> <li>Reusing Captured JSON in Another Tool</li> </ol> <p>In the <code>rio</code> tool:</p> <p>Relevant Block</p> <pre>arguments:\n</pre> <pre>  - valueFrom: \"${\\n    let redKey = Object.keys(inputs.asset).find(key =&gt; \\n        inputs.asset[key]['eo:bands'] &amp;&amp; \\n        inputs.asset[key]['eo:bands'].length === 1 &amp;&amp;\\n        inputs.asset[key]['eo:bands'].some(band =&gt; band.common_name === inputs.common_band_name)\\n    );\\n    return inputs.asset[redKey].href;\\n}\\n\"\n</pre> <pre>  - valueFrom: |\n</pre> <pre>      ${\n</pre> <pre>          return inputs.common_band_name + \".png\";\n</pre> <pre>      }\n</pre> <pre>\n</pre> <ul> <li>First <code>valueFrom</code>: Selects the asset whose <code>eo:bands</code> array contains a band with a <code>common_name</code> matching <code>inputs.common_band_name</code> and returns its <code>href</code>.</li> <li>Second <code>valueFrom</code>: Generates the output filename for the PNG (<code>red.png</code> for the <code>red</code> band).</li> </ul> <p>How It Works</p> <ul> <li>The <code>rio</code> tool processes the asset URL (href) extracted in the first step.`</li> <li>It generates a PNG file using the <code>common-band-name</code> and saves it as `.png.</li> </ul> <ol> <li>Complete CWL Example</li> </ol> <p>Here\u2019s the full <code>capture-json-stdout.cwl</code> file:</p> <pre>cwlVersion: v1.2\n</pre> <pre>$graph:\n</pre> <pre>  - class: Workflow\n</pre> <pre>    id: main\n</pre> <pre>    requirements:\n</pre> <pre>      InlineJavascriptRequirement: {}\n</pre> <pre>      NetworkAccess:\n</pre> <pre>        networkAccess: true\n</pre> <pre>    inputs:\n</pre> <pre>      stac-item:\n</pre> <pre>        type: string\n</pre> <pre>      common-band-name:\n</pre> <pre>        type: string\n</pre> <pre>    outputs:\n</pre> <pre>      preview:\n</pre> <pre>        outputSource: step_translate/preview\n</pre> <pre>        type: File\n</pre> <pre>      json_output:\n</pre> <pre>        outputSource: step_stac/asset\n</pre> <pre>        type: Any\n</pre> <pre>    steps:\n</pre> <pre>      step_stac:\n</pre> <pre>        in:\n</pre> <pre>          stac_item: stac-item\n</pre> <pre>        out:\n</pre> <pre>          - asset\n</pre> <pre>        run: \"#stac\"\n</pre> <pre>      step_translate:\n</pre> <pre>        in:\n</pre> <pre>          asset:\n</pre> <pre>            source: step_stac/asset\n</pre> <pre>          common_band_name: common-band-name\n</pre> <pre>        out:\n</pre> <pre>          - preview\n</pre> <pre>        run: \"#rio\"\n</pre> <pre>  - class: CommandLineTool\n</pre> <pre>    id: stac\n</pre> <pre>    requirements:\n</pre> <pre>      DockerRequirement:\n</pre> <pre>        dockerPull: docker.io/curlimages/curl:latest\n</pre> <pre>    baseCommand: curl\n</pre> <pre>    arguments:\n</pre> <pre>      - -s\n</pre> <pre>      - $( inputs.stac_item )\n</pre> <pre>    inputs:\n</pre> <pre>      stac_item:\n</pre> <pre>        type: string\n</pre> <pre>    stdout: message\n</pre> <pre>    outputs:\n</pre> <pre>      asset:\n</pre> <pre>        type: Any\n</pre> <pre>        outputBinding:\n</pre> <pre>          glob: message\n</pre> <pre>          loadContents: true\n</pre> <pre>          outputEval: ${ return JSON.parse(self[0].contents).assets; }\n</pre> <pre>  - class: CommandLineTool\n</pre> <pre>    id: rio\n</pre> <pre>    requirements:\n</pre> <pre>      DockerRequirement:\n</pre> <pre>        dockerPull: ghcr.io/eoap/how-to/rio:1.0.0\n</pre> <pre>    baseCommand: rio\n</pre> <pre>    arguments:\n</pre> <pre>      - convert\n</pre> <pre>      - --driver\n</pre> <pre>      - PNG\n</pre> <pre>      - --dtype\n</pre> <pre>      - uint8\n</pre> <pre>      - valueFrom: \"${\\n    let redKey = Object.keys(inputs.asset).find(key =&gt; \\n        inputs.asset[key]['eo:bands'] &amp;&amp; \\n        inputs.asset[key]['eo:bands'].length === 1 &amp;&amp;\\n        inputs.asset[key]['eo:bands'].some(band =&gt; band.common_name === inputs.common_band_name)\\n    );\\n    return inputs.asset[redKey].href;\\n}\\n\"\n</pre> <pre>      - valueFrom: |\n</pre> <pre>          ${\n</pre> <pre>              return inputs.common_band_name + \".png\";\n</pre> <pre>          }\n</pre> <pre>    inputs:\n</pre> <pre>      asset:\n</pre> <pre>        type: Any\n</pre> <pre>      common_band_name:\n</pre> <pre>        type: string\n</pre> <pre>    outputs:\n</pre> <pre>      preview:\n</pre> <pre>        type: File\n</pre> <pre>        outputBinding:\n</pre> <pre>          glob: \"*.png\"\n</pre> <p>It's graphical representation:</p> <ol> <li>Run the Example</li> </ol> <p>Command to execute the workflow:</p> <pre>cwltool capture-json-stdout.cwl \\\n  --stac-item https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A \\\n  --common-band-name red\n</pre> <ol> <li>Execute the CWL Tool</li> </ol> <p>Run the command in your terminal:</p> <pre>cwltool capture-json-stdout.cwl \\\n  --stac-item https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A \\\n  --common-band-name red\n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.3/x64/bin/cwltool 3.1.20250110105449\n</pre> <pre>INFO Resolved '../cwl-workflows/capture-json-stdout.cwl' to 'file:///home/runner/work/how-to/how-to/cwl-workflows/capture-json-stdout.cwl'\n</pre> <pre>INFO [workflow ] start\n</pre> <pre>INFO [workflow ] starting step step_stac\n</pre> <pre>INFO [step step_stac] start\n</pre> <pre>Error: No such object: docker.io/curlimages/curl:latest\n</pre> <pre>INFO ['docker', 'pull', 'docker.io/curlimages/curl:latest']\n</pre> <pre>latest: Pulling from curlimages/curl\n</pre> <pre>\n</pre> <pre>\r</pre> <pre>fe07684b16b8: Pulling fs layer \r</pre> <pre>\n</pre> <pre>\r</pre> <pre>a7c95e108d8f: Pulling fs layer \r</pre> <pre>\n</pre> <pre>\r</pre> <pre>bd9ddc54bea9: Pulling fs layer \r</pre> <pre>\r</pre> <pre>bd9ddc54bea9: Downloading      34B/34B\r</pre> <pre>\r</pre> <pre>bd9ddc54bea9: Download complete \r</pre> <pre>\r</pre> <pre>a7c95e108d8f: Downloading  63.92kB/6.034MB\r</pre> <pre>\r</pre> <pre>fe07684b16b8: Downloading  39.03kB/3.797MB\r</pre> <pre>\r</pre> <pre>a7c95e108d8f: Verifying Checksum \r</pre> <pre>\r</pre> <pre>a7c95e108d8f: Download complete \r</pre> <pre>\r</pre> <pre>fe07684b16b8: Verifying Checksum \r</pre> <pre>\r</pre> <pre>fe07684b16b8: Download complete \r</pre> <pre>\r</pre> <pre>fe07684b16b8: Extracting  65.54kB/3.797MB\r</pre> <pre>\r</pre> <pre>fe07684b16b8: Extracting  3.797MB/3.797MB\r</pre> <pre>\r</pre> <pre>fe07684b16b8: Extracting  3.797MB/3.797MB\r</pre> <pre>\r</pre> <pre>fe07684b16b8: Pull complete \r</pre> <pre>\r</pre> <pre>a7c95e108d8f: Extracting  65.54kB/6.034MB\r</pre> <pre>\r</pre> <pre>a7c95e108d8f: Extracting  6.034MB/6.034MB\r</pre> <pre>\r</pre> <pre>a7c95e108d8f: Pull complete \r</pre> <pre>\r</pre> <pre>bd9ddc54bea9: Extracting      34B/34B\r</pre> <pre>\r</pre> <pre>bd9ddc54bea9: Extracting      34B/34B\r</pre> <pre>\r</pre> <pre>bd9ddc54bea9: Pull complete \r</pre> <pre>Digest: sha256:9a1ed35addb45476afa911696297f8e115993df459278ed036182dd2cd22b67b\n</pre> <pre>Status: Downloaded newer image for curlimages/curl:latest\n</pre> <pre>docker.io/curlimages/curl:latest\n</pre> <pre>INFO [job step_stac] /tmp/s55j90o4$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/s55j90o4,target=/Uqhoaw \\\n</pre> <pre>    --mount=type=bind,source=/tmp/uqnle0jq,target=/tmp \\\n</pre> <pre>    --workdir=/Uqhoaw \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/ybk86ybe/20250620071620-473936.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/Uqhoaw \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    -s \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/s55j90o4/message\n</pre> <pre>INFO [job step_stac] completed success\n</pre> <pre>INFO [step step_stac] completed success\n</pre> <pre>INFO [workflow ] starting step step_translate\n</pre> <pre>INFO [step step_translate] start\n</pre> <pre>INFO [job step_translate] /tmp/w4e67mao$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/w4e67mao,target=/Uqhoaw \\\n</pre> <pre>    --mount=type=bind,source=/tmp/cqscpss4,target=/tmp \\\n</pre> <pre>    --workdir=/Uqhoaw \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/3abc5wcm/20250620071621-503995.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/Uqhoaw \\\n</pre> <pre>    ghcr.io/eoap/how-to/rio:1.0.0 \\\n</pre> <pre>    rio \\\n</pre> <pre>    convert \\\n</pre> <pre>    --driver \\\n</pre> <pre>    PNG \\\n</pre> <pre>    --dtype \\\n</pre> <pre>    uint8 \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B04.tif \\\n</pre> <pre>    red.png\n</pre> <pre>WARNING:rasterio._env:CPLE_NotSupported in driver PNG does not support creation option BLOCKXSIZE\n</pre> <pre>WARNING:rasterio._env:CPLE_NotSupported in driver PNG does not support creation option BLOCKYSIZE\n</pre> <pre>WARNING:rasterio._env:CPLE_NotSupported in driver PNG does not support creation option TILED\n</pre> <pre>WARNING:rasterio._env:CPLE_NotSupported in driver PNG does not support creation option COMPRESS\n</pre> <pre>WARNING:rasterio._env:CPLE_NotSupported in driver PNG does not support creation option INTERLEAVE\n</pre> <pre>INFO [job step_translate] Max memory used: 777MiB\n</pre> <pre>INFO [job step_translate] completed success\n</pre> <pre>INFO [step step_translate] completed success\n</pre> <pre>INFO [workflow ] completed success\n</pre> <pre>INFO Final process status is success\n</pre> <pre>{\n</pre> <pre>  \"thumbnail\": {\n</pre> <pre>    \"title\": \"Thumbnail\",\n</pre> <pre>    \"type\": \"image/png\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"thumbnail\"\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/53/H/PA/2021/7/23/0/preview.jpg\"\n</pre> <pre>  },\n</pre> <pre>  \"overview\": {\n</pre> <pre>    \"title\": \"True color image\",\n</pre> <pre>    \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"overview\"\n</pre> <pre>    ],\n</pre> <pre>    \"gsd\": 10,\n</pre> <pre>    \"eo:bands\": [\n</pre> <pre>      {\n</pre> <pre>        \"name\": \"B04\",\n</pre> <pre>        \"common_name\": \"red\",\n</pre> <pre>        \"center_wavelength\": 0.6645,\n</pre> <pre>        \"full_width_half_max\": 0.038\n</pre> <pre>      },\n</pre> <pre>      {\n</pre> <pre>        \"name\": \"B03\",\n</pre> <pre>        \"common_name\": \"green\",\n</pre> <pre>        \"center_wavelength\": 0.56,\n</pre> <pre>        \"full_width_half_max\": 0.045\n</pre> <pre>      },\n</pre> <pre>      {\n</pre> <pre>        \"name\": \"B02\",\n</pre> <pre>        \"common_name\": \"blue\",\n</pre> <pre>        \"center_wavelength\": 0.4966,\n</pre> <pre>        \"full_width_half_max\": 0.098\n</pre> <pre>      }\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/L2A_PVI.tif\",\n</pre> <pre>    \"proj:shape\": [\n</pre> <pre>      343,\n</pre> <pre>      343\n</pre> <pre>    ],\n</pre> <pre>    \"proj:transform\": [\n</pre> <pre>      320,\n</pre> <pre>      0,\n</pre> <pre>      600000,\n</pre> <pre>      0,\n</pre> <pre>      -320,\n</pre> <pre>      6100000,\n</pre> <pre>      0,\n</pre> <pre>      0,\n</pre> <pre>      1\n</pre> <pre>    ]\n</pre> <pre>  },\n</pre> <pre>  \"info\": {\n</pre> <pre>    \"title\": \"Original JSON metadata\",\n</pre> <pre>    \"type\": \"application/json\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"metadata\"\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://roda.sentinel-hub.com/sentinel-s2-l2a/tiles/53/H/PA/2021/7/23/0/tileInfo.json\"\n</pre> <pre>  },\n</pre> <pre>  \"metadata\": {\n</pre> <pre>    \"title\": \"Original XML metadata\",\n</pre> <pre>    \"type\": \"application/xml\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"metadata\"\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://roda.sentinel-hub.com/sentinel-s2-l2a/tiles/53/H/PA/2021/7/23/0/metadata.xml\"\n</pre> <pre>  },\n</pre> <pre>  \"visual\": {\n</pre> <pre>    \"title\": \"True color image\",\n</pre> <pre>    \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"overview\"\n</pre> <pre>    ],\n</pre> <pre>    \"gsd\": 10,\n</pre> <pre>    \"eo:bands\": [\n</pre> <pre>      {\n</pre> <pre>        \"name\": \"B04\",\n</pre> <pre>        \"common_name\": \"red\",\n</pre> <pre>        \"center_wavelength\": 0.6645,\n</pre> <pre>        \"full_width_half_max\": 0.038\n</pre> <pre>      },\n</pre> <pre>      {\n</pre> <pre>        \"name\": \"B03\",\n</pre> <pre>        \"common_name\": \"green\",\n</pre> <pre>        \"center_wavelength\": 0.56,\n</pre> <pre>        \"full_width_half_max\": 0.045\n</pre> <pre>      },\n</pre> <pre>      {\n</pre> <pre>        \"name\": \"B02\",\n</pre> <pre>        \"common_name\": \"blue\",\n</pre> <pre>        \"center_wavelength\": 0.4966,\n</pre> <pre>        \"full_width_half_max\": 0.098\n</pre> <pre>      }\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/TCI.tif\",\n</pre> <pre>    \"proj:shape\": [\n</pre> <pre>      10980,\n</pre> <pre>      10980\n</pre> <pre>    ],\n</pre> <pre>    \"proj:transform\": [\n</pre> <pre>      10,\n</pre> <pre>      0,\n</pre> <pre>      600000,\n</pre> <pre>      0,\n</pre> <pre>      -10,\n</pre> <pre>      6100000,\n</pre> <pre>      0,\n</pre> <pre>      0,\n</pre> <pre>      1\n</pre> <pre>    ]\n</pre> <pre>  },\n</pre> <pre>  \"B01\": {\n</pre> <pre>    \"title\": \"Band 1 (coastal)\",\n</pre> <pre>    \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"data\"\n</pre> <pre>    ],\n</pre> <pre>    \"gsd\": 60,\n</pre> <pre>    \"eo:bands\": [\n</pre> <pre>      {\n</pre> <pre>        \"name\": \"B01\",\n</pre> <pre>        \"common_name\": \"coastal\",\n</pre> <pre>        \"center_wavelength\": 0.4439,\n</pre> <pre>        \"full_width_half_max\": 0.027\n</pre> <pre>      }\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B01.tif\",\n</pre> <pre>    \"proj:shape\": [\n</pre> <pre>      1830,\n</pre> <pre>      1830\n</pre> <pre>    ],\n</pre> <pre>    \"proj:transform\": [\n</pre> <pre>      60,\n</pre> <pre>      0,\n</pre> <pre>      600000,\n</pre> <pre>      0,\n</pre> <pre>      -60,\n</pre> <pre>      6100000,\n</pre> <pre>      0,\n</pre> <pre>      0,\n</pre> <pre>      1\n</pre> <pre>    ]\n</pre> <pre>  },\n</pre> <pre>  \"B02\": {\n</pre> <pre>    \"title\": \"Band 2 (blue)\",\n</pre> <pre>    \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"data\"\n</pre> <pre>    ],\n</pre> <pre>    \"gsd\": 10,\n</pre> <pre>    \"eo:bands\": [\n</pre> <pre>      {\n</pre> <pre>        \"name\": \"B02\",\n</pre> <pre>        \"common_name\": \"blue\",\n</pre> <pre>        \"center_wavelength\": 0.4966,\n</pre> <pre>        \"full_width_half_max\": 0.098\n</pre> <pre>      }\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B02.tif\",\n</pre> <pre>    \"proj:shape\": [\n</pre> <pre>      10980,\n</pre> <pre>      10980\n</pre> <pre>    ],\n</pre> <pre>    \"proj:transform\": [\n</pre> <pre>      10,\n</pre> <pre>      0,\n</pre> <pre>      600000,\n</pre> <pre>      0,\n</pre> <pre>      -10,\n</pre> <pre>      6100000,\n</pre> <pre>      0,\n</pre> <pre>      0,\n</pre> <pre>      1\n</pre> <pre>    ]\n</pre> <pre>  },\n</pre> <pre>  \"B03\": {\n</pre> <pre>    \"title\": \"Band 3 (green)\",\n</pre> <pre>    \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"data\"\n</pre> <pre>    ],\n</pre> <pre>    \"gsd\": 10,\n</pre> <pre>    \"eo:bands\": [\n</pre> <pre>      {\n</pre> <pre>        \"name\": \"B03\",\n</pre> <pre>        \"common_name\": \"green\",\n</pre> <pre>        \"center_wavelength\": 0.56,\n</pre> <pre>        \"full_width_half_max\": 0.045\n</pre> <pre>      }\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B03.tif\",\n</pre> <pre>    \"proj:shape\": [\n</pre> <pre>      10980,\n</pre> <pre>      10980\n</pre> <pre>    ],\n</pre> <pre>    \"proj:transform\": [\n</pre> <pre>      10,\n</pre> <pre>      0,\n</pre> <pre>      600000,\n</pre> <pre>      0,\n</pre> <pre>      -10,\n</pre> <pre>      6100000,\n</pre> <pre>      0,\n</pre> <pre>      0,\n</pre> <pre>      1\n</pre> <pre>    ]\n</pre> <pre>  },\n</pre> <pre>  \"B04\": {\n</pre> <pre>    \"title\": \"Band 4 (red)\",\n</pre> <pre>    \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"data\"\n</pre> <pre>    ],\n</pre> <pre>    \"gsd\": 10,\n</pre> <pre>    \"eo:bands\": [\n</pre> <pre>      {\n</pre> <pre>        \"name\": \"B04\",\n</pre> <pre>        \"common_name\": \"red\",\n</pre> <pre>        \"center_wavelength\": 0.6645,\n</pre> <pre>        \"full_width_half_max\": 0.038\n</pre> <pre>      }\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B04.tif\",\n</pre> <pre>    \"proj:shape\": [\n</pre> <pre>      10980,\n</pre> <pre>      10980\n</pre> <pre>    ],\n</pre> <pre>    \"proj:transform\": [\n</pre> <pre>      10,\n</pre> <pre>      0,\n</pre> <pre>      600000,\n</pre> <pre>      0,\n</pre> <pre>      -10,\n</pre> <pre>      6100000,\n</pre> <pre>      0,\n</pre> <pre>      0,\n</pre> <pre>      1\n</pre> <pre>    ]\n</pre> <pre>  },\n</pre> <pre>  \"B05\": {\n</pre> <pre>    \"title\": \"Band 5\",\n</pre> <pre>    \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"data\"\n</pre> <pre>    ],\n</pre> <pre>    \"gsd\": 20,\n</pre> <pre>    \"eo:bands\": [\n</pre> <pre>      {\n</pre> <pre>        \"name\": \"B05\",\n</pre> <pre>        \"center_wavelength\": 0.7039,\n</pre> <pre>        \"full_width_half_max\": 0.019\n</pre> <pre>      }\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B05.tif\",\n</pre> <pre>    \"proj:shape\": [\n</pre> <pre>      5490,\n</pre> <pre>      5490\n</pre> <pre>    ],\n</pre> <pre>    \"proj:transform\": [\n</pre> <pre>      20,\n</pre> <pre>      0,\n</pre> <pre>      600000,\n</pre> <pre>      0,\n</pre> <pre>      -20,\n</pre> <pre>      6100000,\n</pre> <pre>      0,\n</pre> <pre>      0,\n</pre> <pre>      1\n</pre> <pre>    ]\n</pre> <pre>  },\n</pre> <pre>  \"B06\": {\n</pre> <pre>    \"title\": \"Band 6\",\n</pre> <pre>    \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"data\"\n</pre> <pre>    ],\n</pre> <pre>    \"gsd\": 20,\n</pre> <pre>    \"eo:bands\": [\r</pre> <pre>\n</pre> <pre>      {\n</pre> <pre>        \"name\": \"B06\",\n</pre> <pre>        \"center_wavelength\": 0.7402,\n</pre> <pre>        \"full_width_half_max\": 0.018\n</pre> <pre>      }\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B06.tif\",\n</pre> <pre>    \"proj:shape\": [\n</pre> <pre>      5490,\n</pre> <pre>      5490\n</pre> <pre>    ],\n</pre> <pre>    \"proj:transform\": [\n</pre> <pre>      20,\n</pre> <pre>      0,\n</pre> <pre>      600000,\n</pre> <pre>      0,\n</pre> <pre>      -20,\n</pre> <pre>      6100000,\n</pre> <pre>      0,\n</pre> <pre>      0,\n</pre> <pre>      1\n</pre> <pre>    ]\n</pre> <pre>  },\n</pre> <pre>  \"B07\": {\n</pre> <pre>    \"title\": \"Band 7\",\n</pre> <pre>    \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"data\"\n</pre> <pre>    ],\n</pre> <pre>    \"gsd\": 20,\n</pre> <pre>    \"eo:bands\": [\n</pre> <pre>      {\n</pre> <pre>        \"name\": \"B07\",\n</pre> <pre>        \"center_wavelength\": 0.7825,\n</pre> <pre>        \"full_width_half_max\": 0.028\n</pre> <pre>      }\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B07.tif\",\n</pre> <pre>    \"proj:shape\": [\n</pre> <pre>      5490,\n</pre> <pre>      5490\n</pre> <pre>    ],\n</pre> <pre>    \"proj:transform\": [\n</pre> <pre>      20,\n</pre> <pre>      0,\n</pre> <pre>      600000,\n</pre> <pre>      0,\n</pre> <pre>      -20,\n</pre> <pre>      6100000,\n</pre> <pre>      0,\n</pre> <pre>      0,\n</pre> <pre>      1\n</pre> <pre>    ]\n</pre> <pre>  },\n</pre> <pre>  \"B08\": {\n</pre> <pre>    \"title\": \"Band 8 (nir)\",\n</pre> <pre>    \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"data\"\n</pre> <pre>    ],\n</pre> <pre>    \"gsd\": 10,\n</pre> <pre>    \"eo:bands\": [\n</pre> <pre>      {\n</pre> <pre>        \"name\": \"B08\",\n</pre> <pre>        \"common_name\": \"nir\",\n</pre> <pre>        \"center_wavelength\": 0.8351,\n</pre> <pre>        \"full_width_half_max\": 0.145\n</pre> <pre>      }\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B08.tif\",\n</pre> <pre>    \"proj:shape\": [\n</pre> <pre>      10980,\n</pre> <pre>      10980\n</pre> <pre>    ],\n</pre> <pre>    \"proj:transform\": [\n</pre> <pre>      10,\n</pre> <pre>      0,\n</pre> <pre>      600000,\n</pre> <pre>      0,\n</pre> <pre>      -10,\n</pre> <pre>      6100000,\n</pre> <pre>      0,\n</pre> <pre>      0,\n</pre> <pre>      1\n</pre> <pre>    ]\n</pre> <pre>  },\n</pre> <pre>  \"B8A\": {\n</pre> <pre>    \"title\": \"Band 8A\",\n</pre> <pre>    \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"data\"\n</pre> <pre>    ],\n</pre> <pre>    \"gsd\": 20,\n</pre> <pre>    \"eo:bands\": [\n</pre> <pre>      {\n</pre> <pre>        \"name\": \"B8A\",\n</pre> <pre>        \"center_wavelength\": 0.8648,\n</pre> <pre>        \"full_width_half_max\": 0.033\n</pre> <pre>      }\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B8A.tif\",\n</pre> <pre>    \"proj:shape\": [\n</pre> <pre>      5490,\r</pre> <pre>\n</pre> <pre>      5490\n</pre> <pre>    ],\n</pre> <pre>    \"proj:transform\": [\n</pre> <pre>      20,\n</pre> <pre>      0,\n</pre> <pre>      600000,\n</pre> <pre>      0,\n</pre> <pre>      -20,\n</pre> <pre>      6100000,\n</pre> <pre>      0,\n</pre> <pre>      0,\n</pre> <pre>      1\n</pre> <pre>    ]\n</pre> <pre>  },\n</pre> <pre>  \"B09\": {\n</pre> <pre>    \"title\": \"Band 9\",\n</pre> <pre>    \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"data\"\n</pre> <pre>    ],\n</pre> <pre>    \"gsd\": 60,\n</pre> <pre>    \"eo:bands\": [\n</pre> <pre>      {\n</pre> <pre>        \"name\": \"B09\",\n</pre> <pre>        \"center_wavelength\": 0.945,\n</pre> <pre>        \"full_width_half_max\": 0.026\n</pre> <pre>      }\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B09.tif\",\n</pre> <pre>    \"proj:shape\": [\n</pre> <pre>      1830,\n</pre> <pre>      1830\n</pre> <pre>    ],\n</pre> <pre>    \"proj:transform\": [\n</pre> <pre>      60,\n</pre> <pre>      0,\n</pre> <pre>      600000,\n</pre> <pre>      0,\n</pre> <pre>      -60,\n</pre> <pre>      6100000,\n</pre> <pre>      0,\n</pre> <pre>      0,\n</pre> <pre>      1\n</pre> <pre>    ]\n</pre> <pre>  },\n</pre> <pre>  \"B11\": {\n</pre> <pre>    \"title\": \"Band 11 (swir16)\",\n</pre> <pre>    \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"data\"\n</pre> <pre>    ],\n</pre> <pre>    \"gsd\": 20,\n</pre> <pre>    \"eo:bands\": [\n</pre> <pre>      {\n</pre> <pre>        \"name\": \"B11\",\n</pre> <pre>        \"common_name\": \"swir16\",\n</pre> <pre>        \"center_wavelength\": 1.6137,\n</pre> <pre>        \"full_width_half_max\": 0.143\n</pre> <pre>      }\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B11.tif\",\n</pre> <pre>    \"proj:shape\": [\n</pre> <pre>      5490,\n</pre> <pre>      5490\n</pre> <pre>    ],\n</pre> <pre>    \"proj:transform\": [\n</pre> <pre>      20,\n</pre> <pre>      0,\n</pre> <pre>      600000,\n</pre> <pre>      0,\n</pre> <pre>      -20,\n</pre> <pre>      6100000,\n</pre> <pre>      0,\n</pre> <pre>      0,\n</pre> <pre>      1\n</pre> <pre>    ]\n</pre> <pre>  },\n</pre> <pre>  \"B12\": {\n</pre> <pre>    \"title\": \"Band 12 (swir22)\",\n</pre> <pre>    \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"data\"\n</pre> <pre>    ],\n</pre> <pre>    \"gsd\": 20,\n</pre> <pre>    \"eo:bands\": [\n</pre> <pre>      {\n</pre> <pre>        \"name\": \"B12\",\n</pre> <pre>        \"common_name\": \"swir22\",\n</pre> <pre>        \"center_wavelength\": 2.22024,\n</pre> <pre>        \"full_width_half_max\": 0.242\n</pre> <pre>      }\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B12.tif\",\n</pre> <pre>    \"proj:shape\": [\n</pre> <pre>      5490,\n</pre> <pre>      5490\n</pre> <pre>    ],\n</pre> <pre>    \"proj:transform\": [\n</pre> <pre>      20,\n</pre> <pre>      0,\n</pre> <pre>      600000,\n</pre> <pre>      0,\n</pre> <pre>      -20,\n</pre> <pre>      6100000,\n</pre> <pre>      0,\n</pre> <pre>      0,\n</pre> <pre>      1\n</pre> <pre>    ]\n</pre> <pre>  },\n</pre> <pre>  \"AOT\": {\n</pre> <pre>    \"title\": \"Aerosol Optical Thickness (AOT)\",\n</pre> <pre>    \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"data\"\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/AOT.tif\",\n</pre> <pre>    \"proj:shape\": [\n</pre> <pre>      1830,\n</pre> <pre>      1830\n</pre> <pre>    ],\n</pre> <pre>    \"proj:transform\": [\n</pre> <pre>      60,\n</pre> <pre>      0,\n</pre> <pre>      600000,\n</pre> <pre>      0,\n</pre> <pre>      -60,\n</pre> <pre>      6100000,\n</pre> <pre>      0,\n</pre> <pre>      0,\n</pre> <pre>      1\n</pre> <pre>    ]\n</pre> <pre>  },\n</pre> <pre>  \"WVP\": {\n</pre> <pre>    \"title\": \"Water Vapour (WVP)\",\n</pre> <pre>    \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n</pre> <pre>    \"roles\": [\n</pre> <pre>      \"data\"\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/WVP.tif\",\n</pre> <pre>    \"proj:shape\": [\n</pre> <pre>      10980,\n</pre> <pre>      10980\n</pre> <pre>    ],\n</pre> <pre>    \"proj:transform\": [\n</pre> <pre>      10,\n</pre> <pre>      0,\n</pre> <pre>      600000,\n</pre> <pre>      0,\n</pre> <pre>      -10,\n</pre> <pre>      6100000,\n</pre> <pre>      0,\n</pre> <pre>      0,\n</pre> <pre>      1\n</pre> <pre>    ]\n</pre> <pre>  },\n</pre> <pre>  \"SCL\": {\n</pre> <pre>    \"title\": \"Scene Classification Map (SCL)\",\n</pre> <pre>    \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n</pre> <pre>    \"roles\": [\r</pre> <pre>\n</pre> <pre>      \"data\"\n</pre> <pre>    ],\n</pre> <pre>    \"href\": \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/SCL.tif\",\n</pre> <pre>    \"proj:shape\": [\n</pre> <pre>      5490,\n</pre> <pre>      5490\n</pre> <pre>    ],\n</pre> <pre>    \"proj:transform\": [\n</pre> <pre>      20,\n</pre> <pre>      0,\n</pre> <pre>      600000,\n</pre> <pre>      0,\n</pre> <pre>      -20,\n</pre> <pre>      6100000,\n</pre> <pre>      0,\n</pre> <pre>      0,\n</pre> <pre>      1\n</pre> <pre>    ]\n</pre> <pre>  }\n</pre> <pre>}\n</pre> <pre>{\n</pre> <pre>  \"location\": \"file:///home/runner/work/how-to/how-to/docs/red.png\",\n</pre> <pre>  \"basename\": \"red.png\",\n</pre> <pre>  \"class\": \"File\",\n</pre> <pre>  \"checksum\": \"sha1$3b0ab5ca89bc640e276ac48c6d37a900a4493708\",\n</pre> <pre>  \"size\": 103995863,\n</pre> <pre>  \"path\": \"/home/runner/work/how-to/how-to/docs/red.png\"\n</pre> <pre>}\n</pre>"},{"location":"capture-json-stdout/#how-to-guide-capturing-json-from-stdout-and-reusing-it-in-another-cwl-tool","title":"How-to Guide: Capturing JSON from stdout and Reusing It in Another CWL Tool\u00b6","text":"<p>This guide demonstrates how to capture a JSON response from the stdout of one CWL tool and reuse it as input for another tool.</p> <p>We'll focus on two key sections:</p> <ol> <li>Capturing JSON output:</li> </ol>"},{"location":"capture-json-stdout/#objective","title":"Objective\u00b6","text":"<ul> <li>Tool 1 (<code>stac</code>): Fetch a STAC item in JSON format and extract its <code>assets</code>.</li> <li>Tool 2 (<code>rio</code>): Process the extracted asset to generate a PNG image based on the specified band.</li> </ul>"},{"location":"capture-json-stdout/#steps","title":"Steps\u00b6","text":"<ol> <li>Capturing JSON from stdout</li> </ol> <p>In the <code>stac</code> tool:</p> <p>Relevant Block</p>"},{"location":"capture-json-stdout/#expected-output","title":"Expected Output\u00b6","text":"<ul> <li>Intermediate Output (<code>json_output</code>): Extracted assets from the STAC item JSON.</li> <li>Final Output (<code>preview</code>): PNG file for the specified band (e.g., <code>red.png</code>).</li> </ul>"},{"location":"capture-json-stdout/#key-takeaways","title":"Key Takeaways\u00b6","text":"<ul> <li><p>Capturing JSON:</p> <ul> <li>Use <code>stdout</code> to redirect the JSON output to a file.</li> <li>Parse and extract specific fields using <code>outputEval</code>.</li> </ul> </li> <li><p>Reusing JSON:</p> <ul> <li>Use <code>valueFrom</code> in arguments to select fields dynamically from the JSON input.</li> <li>Process the selected field (e.g., generate a file based on its href).</li> </ul> </li> </ul> <p>By focusing on <code>stdout</code> and <code>outputBinding</code>, this guide highlights how CWL facilitates JSON data flow between tools.</p>"},{"location":"capture-stdout/","title":"How-to Guide: Capturing stdout with CWL","text":"<pre>stdout: message\n</pre> <pre>outputs:\n</pre> <pre>  info:\n</pre> <pre>    type: string\n</pre> <pre>    outputBinding:\n</pre> <pre>      glob: message\n</pre> <pre>      loadContents: true\n</pre> <pre>      outputEval: $(self[0].contents)\n</pre> <pre>stdout: message\n</pre> <ol> <li>Understand the outputs Block</li> </ol> <p>The <code>outputs</code> block defines how to extract information from the <code>stdout</code> file:</p> <pre>outputs:\n</pre> <pre>  info:\n</pre> <pre>    type: string\n</pre> <pre>    outputBinding:\n</pre> <pre>      glob: message\n</pre> <pre>      loadContents: true\n</pre> <pre>      outputEval: $(self[0].contents)\n</pre> <ol> <li>Review the CWL File</li> </ol> <p>Here\u2019s the complete example (<code>capture-stdout.cwl</code>):</p> <pre>cwlVersion: v1.2\n</pre> <pre>$graph:\n</pre> <pre>  - class: Workflow\n</pre> <pre>    id: main\n</pre> <pre>    inputs:\n</pre> <pre>      tif:\n</pre> <pre>        type: string\n</pre> <pre>    outputs:\n</pre> <pre>      info:\n</pre> <pre>        outputSource: step-info/info\n</pre> <pre>        type: string\n</pre> <pre>    steps:\n</pre> <pre>      step-info:\n</pre> <pre>        in:\n</pre> <pre>          geotif: tif\n</pre> <pre>        out:\n</pre> <pre>          - info\n</pre> <pre>        run: \"#rio\"\n</pre> <pre>  - class: CommandLineTool\n</pre> <pre>    id: rio\n</pre> <pre>    requirements:\n</pre> <pre>      NetworkAccess:\n</pre> <pre>        networkAccess: true\n</pre> <pre>      InlineJavascriptRequirement: {}\n</pre> <pre>      DockerRequirement:\n</pre> <pre>        dockerPull: ghcr.io/eoap/how-to/rio:1.0.0\n</pre> <pre>    baseCommand: rio\n</pre> <pre>    arguments:\n</pre> <pre>      - info\n</pre> <pre>      - $(inputs.geotif)\n</pre> <pre>    inputs:\n</pre> <pre>      geotif:\n</pre> <pre>        type: string\n</pre> <pre>    stdout: message\n</pre> <pre>    outputs:\n</pre> <pre>      info:\n</pre> <pre>        type: string\n</pre> <pre>        outputBinding:\n</pre> <pre>          glob: message\n</pre> <pre>          loadContents: true\n</pre> <pre>          outputEval: $(self[0].contents)\n</pre> <p>It's graphical representation:</p> <ol> <li>Provide an Input</li> </ol> <p>For this example, use the input file (or command-line argument) to specify the GeoTIFF:</p> <pre>cwltool capture-stdout.cwl \\\n    --tif \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/10/T/FK/2021/7/S2B_10TFK_20210713_0_L2A/TCI.tif\"\n</pre> <ol> <li>Execute the CWL Tool</li> </ol> <p>Run the command in your terminal:</p> <pre>cwltool capture-stdout.cwl \\\n    --tif \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/10/T/FK/2021/7/S2B_10TFK_20210713_0_L2A/TCI.tif\" &gt; output.json\n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.3/x64/bin/cwltool 3.1.20250110105449\n</pre> <pre>INFO Resolved '../cwl-workflows/capture-stdout.cwl' to 'file:///home/runner/work/how-to/how-to/cwl-workflows/capture-stdout.cwl'\n</pre> <pre>INFO [workflow ] start\n</pre> <pre>INFO [workflow ] starting step step-info\n</pre> <pre>INFO [step step-info] start\n</pre> <pre>INFO [job step-info] /tmp/0un8bj3n$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/0un8bj3n,target=/xKzbcZ \\\n</pre> <pre>    --mount=type=bind,source=/tmp/3ddz4j98,target=/tmp \\\n</pre> <pre>    --workdir=/xKzbcZ \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/690ht63y/20250620071648-784272.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/xKzbcZ \\\n</pre> <pre>    ghcr.io/eoap/how-to/rio:1.0.0 \\\n</pre> <pre>    rio \\\n</pre> <pre>    info \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/10/T/FK/2021/7/S2B_10TFK_20210713_0_L2A/TCI.tif &gt; /tmp/0un8bj3n/message\n</pre> <pre>INFO [job step-info] Max memory used: 39MiB\n</pre> <pre>INFO [job step-info] completed success\n</pre> <pre>INFO [step step-info] completed success\n</pre> <pre>INFO [workflow ] completed success\n</pre> <pre>INFO Final process status is success\n</pre> <pre>{\n</pre> <pre>  \"info\": \"{\\\"blockxsize\\\": 1024, \\\"blockysize\\\": 1024, \\\"bounds\\\": [600000.0, 4390200.0, 709800.0, 4500000.0], \\\"colorinterp\\\": [\\\"red\\\", \\\"green\\\", \\\"blue\\\"], \\\"compress\\\": \\\"deflate\\\", \\\"count\\\": 3, \\\"crs\\\": \\\"EPSG:32610\\\", \\\"descriptions\\\": [null, null, null], \\\"driver\\\": \\\"GTiff\\\", \\\"dtype\\\": \\\"uint8\\\", \\\"height\\\": 10980, \\\"indexes\\\": [1, 2, 3], \\\"interleave\\\": \\\"pixel\\\", \\\"lnglat\\\": [-121.18160686746373, 40.1419732942866], \\\"mask_flags\\\": [[\\\"nodata\\\"], [\\\"nodata\\\"], [\\\"nodata\\\"]], \\\"nodata\\\": 0.0, \\\"res\\\": [10.0, 10.0], \\\"shape\\\": [10980, 10980], \\\"tiled\\\": true, \\\"transform\\\": [10.0, 0.0, 600000.0, 0.0, -10.0, 4500000.0, 0.0, 0.0, 1.0], \\\"units\\\": [null, null, null], \\\"width\\\": 10980}\\n\"\n</pre> <pre>}\n</pre>"},{"location":"capture-stdout/#how-to-guide-capturing-stdout-with-cwl","title":"How-to Guide: Capturing stdout with CWL\u00b6","text":"<p>This guide explains how to capture the standard output (<code>stdout</code>) of a <code>CommandLineTool</code> in CWL.</p> <p>The example focuses on the <code>stdout</code> and <code>outputs</code> blocks to save the tool's output to a file and make it available for further use.</p>"},{"location":"capture-stdout/#objective","title":"Objective\u00b6","text":"<p>Capture the <code>stdout</code> of a command and make it accessible as a workflow output using:</p>"},{"location":"capture-stdout/#steps","title":"Steps\u00b6","text":"<ol> <li>Understand the stdout Block</li> </ol> <p>The <code>stdout</code> field specifies the file where the standard output of the <code>CommandLineTool</code> should be redirected. In this example:</p>"},{"location":"capture-stdout/#expected-output","title":"Expected Output\u00b6","text":"<p>The <code>rio info</code> command processes the GeoTIFF file, and its output is written to the <code>message</code> file. The workflow then captures this file\u2019s contents as the <code>info</code> output.</p> <p>Sample output:</p>"},{"location":"capture-stdout/#key-takeaways","title":"Key Takeaways\u00b6","text":"<ul> <li><code>stdout</code> Field: Redirects the standard output to a specified file.</li> <li><code>outputs</code> Block:<ul> <li>Uses <code>glob</code> to locate the file.</li> <li>Loads the file's contents into memory with <code>loadContents: true</code>.</li> <li>Extracts and evaluates the contents with <code>outputEval</code>.</li> </ul> </li> </ul> <p>By focusing on the <code>stdout</code> and <code>outputs</code> blocks, this guide helps you capture and use command outputs in CWL workflows.</p>"},{"location":"conditional-workflows/","title":"How-to Guide: Using Conditional Workflows","text":"<pre>when: $( inputs.epsg_code == \"native\")\n</pre> <pre>when: $( inputs.epsg_code != \"native\")\n</pre> <ul> <li>Executes the step only if the condition evaluates to true.</li> </ul> <ol> <li>Dynamic Output Selection with <code>pickValue</code></li> </ol> <p>The <code>pickValue</code> field determines how to handle multiple output sources.</p> <pre>pickValue: the_only_non_null\n</pre> <pre>pickValue: the_only_non_null\n</pre> <ul> <li>Selects the only non-null value from the list of outputs.</li> <li>Ensures only one output is passed downstream.</li> </ul> <pre>cwlVersion: v1.2\n</pre> <pre>$graph:\n</pre> <pre>  - class: Workflow\n</pre> <pre>    id: main\n</pre> <pre>    requirements:\n</pre> <pre>      InlineJavascriptRequirement: {}\n</pre> <pre>      NetworkAccess:\n</pre> <pre>        networkAccess: true\n</pre> <pre>      ScatterFeatureRequirement: {}\n</pre> <pre>      MultipleInputFeatureRequirement: {}\n</pre> <pre>    inputs:\n</pre> <pre>      stac-item:\n</pre> <pre>        type: string\n</pre> <pre>      epsg_code:\n</pre> <pre>        type: string\n</pre> <pre>        default: \"native\"\n</pre> <pre>      bands:\n</pre> <pre>        type: string[]\n</pre> <pre>    outputs:\n</pre> <pre>      rgb-tif:\n</pre> <pre>        outputSource: step_color/rgb\n</pre> <pre>        type: File\n</pre> <pre>      stack:\n</pre> <pre>        outputSource:\n</pre> <pre>          - step_stack/stacked\n</pre> <pre>          - step_warp_stack/stacked\n</pre> <pre>        pickValue: the_only_non_null\n</pre> <pre>        type: File\n</pre> <pre>    steps:\n</pre> <pre>      step_curl:\n</pre> <pre>        in:\n</pre> <pre>          stac_item: stac-item\n</pre> <pre>          common_band_name: bands\n</pre> <pre>        out:\n</pre> <pre>          - hrefs\n</pre> <pre>        run: \"#stac\"\n</pre> <pre>        scatter: common_band_name\n</pre> <pre>        scatterMethod: dotproduct\n</pre> <pre>      step_stack:\n</pre> <pre>        in:\n</pre> <pre>          tiffs:\n</pre> <pre>            source: step_curl/hrefs\n</pre> <pre>          epsg_code: epsg_code\n</pre> <pre>        out:\n</pre> <pre>          - stacked\n</pre> <pre>        run: \"#rio_stack\"\n</pre> <pre>        when: $( inputs.epsg_code == \"native\")\n</pre> <pre>      step_warp_stack:\n</pre> <pre>        in:\n</pre> <pre>          tiffs:\n</pre> <pre>            source: step_curl/hrefs\n</pre> <pre>          epsg_code: epsg_code\n</pre> <pre>        out:\n</pre> <pre>          - stacked\n</pre> <pre>        run: \"#rio_warp_stack\"\n</pre> <pre>        when: $( inputs.epsg_code != \"native\")\n</pre> <pre>      step_color:\n</pre> <pre>        in:\n</pre> <pre>          stacked:\n</pre> <pre>            source:\n</pre> <pre>              - step_stack/stacked\n</pre> <pre>              - step_warp_stack/stacked\n</pre> <pre>            pickValue: the_only_non_null\n</pre> <pre>        out:\n</pre> <pre>          - rgb\n</pre> <pre>        run: \"#rio_color\"\n</pre> <pre>  - class: CommandLineTool\n</pre> <pre>    id: stac\n</pre> <pre>    requirements:\n</pre> <pre>      DockerRequirement:\n</pre> <pre>        dockerPull: docker.io/curlimages/curl:latest\n</pre> <pre>    baseCommand: curl\n</pre> <pre>    stdout: message\n</pre> <pre>    arguments:\n</pre> <pre>      - $( inputs.stac_item )\n</pre> <pre>    inputs:\n</pre> <pre>      stac_item:\n</pre> <pre>        type: string\n</pre> <pre>      common_band_name:\n</pre> <pre>        type: string\n</pre> <pre>    outputs:\n</pre> <pre>      hrefs:\n</pre> <pre>        type: string\n</pre> <pre>        outputBinding:\n</pre> <pre>          glob: message\n</pre> <pre>          loadContents: true\n</pre> <pre>          outputEval: |\n</pre> <pre>            ${\n</pre> <pre>              const assets = JSON.parse(self[0].contents).assets;\n</pre> <pre>              const bandKey = Object.keys(assets).find(key =&gt;\n</pre> <pre>                assets[key]['eo:bands'] &amp;&amp;\n</pre> <pre>                assets[key]['eo:bands'].length === 1 &amp;&amp;\n</pre> <pre>                assets[key]['eo:bands'].some(band =&gt; band.common_name === inputs.common_band_name)\n</pre> <pre>              );\n</pre> <pre>              if (!bandKey) {\n</pre> <pre>                throw new Error(`No valid asset found for band: ${inputs.common_band_name}`);\n</pre> <pre>              }\n</pre> <pre>              return assets[bandKey].href;\n</pre> <pre>            }\n</pre> <pre>  - class: CommandLineTool\n</pre> <pre>    id: rio_stack\n</pre> <pre>    requirements:\n</pre> <pre>      DockerRequirement:\n</pre> <pre>        dockerPull: ghcr.io/eoap/how-to/rio:1.0.0\n</pre> <pre>      EnvVarRequirement:\n</pre> <pre>        envDef:\n</pre> <pre>          GDAL_TIFF_INTERNAL_MASK: \"YES\"\n</pre> <pre>          GDAL_HTTP_MERGE_CONSECUTIVE_RANGES: \"YES\"\n</pre> <pre>          CPL_VSIL_CURL_ALLOWED_EXTENSIONS: \".tif\"\n</pre> <pre>      InitialWorkDirRequirement:\n</pre> <pre>        listing:\n</pre> <pre>          - entryname: run.sh\n</pre> <pre>            entry: |-\n</pre> <pre>              #!/bin/bash\n</pre> <pre>              rio stack $@\n</pre> <pre>    baseCommand: [\"/bin/bash\", \"run.sh\"]\n</pre> <pre>    arguments:\n</pre> <pre>      - valueFrom: \"${  \\n  var arr = [];\\n  for(var i=0; i&lt;inputs.tiffs.length; i++) {\\n      arr.push(inputs.tiffs[i]); \\n  }\\n  return arr; \\n  }\\n\"\n</pre> <pre>      - stacked.tif\n</pre> <pre>    inputs:\n</pre> <pre>      tiffs:\n</pre> <pre>        type: string[]\n</pre> <pre>    outputs:\n</pre> <pre>      stacked:\n</pre> <pre>        type: File\n</pre> <pre>        outputBinding:\n</pre> <pre>          glob: stacked.tif\n</pre> <pre>  - class: CommandLineTool\n</pre> <pre>    id: rio_warp_stack\n</pre> <pre>    requirements:\n</pre> <pre>      DockerRequirement:\n</pre> <pre>        dockerPull: ghcr.io/eoap/how-to/rio:1.0.0\n</pre> <pre>      EnvVarRequirement:\n</pre> <pre>        envDef:\n</pre> <pre>          GDAL_TIFF_INTERNAL_MASK: \"YES\"\n</pre> <pre>          GDAL_HTTP_MERGE_CONSECUTIVE_RANGES: \"YES\"\n</pre> <pre>          CPL_VSIL_CURL_ALLOWED_EXTENSIONS: \".tif\"\n</pre> <pre>      InitialWorkDirRequirement:\n</pre> <pre>        listing:\n</pre> <pre>          - entryname: run.sh\n</pre> <pre>            entry: |-\n</pre> <pre>              #!/bin/bash\n</pre> <pre>              rio stack $@\n</pre> <pre>\n</pre> <pre>              rio warp --dst-crs $(inputs.epsg_code) stacked.tif warped.tif\n</pre> <pre>    baseCommand: [\"/bin/bash\", \"run.sh\"]\n</pre> <pre>    arguments:\n</pre> <pre>      - valueFrom: \"${  \\n  var arr = [];\\n  for(var i=0; i&lt;inputs.tiffs.length; i++) {\\n      arr.push(inputs.tiffs[i]); \\n  }\\n  return arr; \\n  }\\n\"\n</pre> <pre>      - stacked.tif\n</pre> <pre>    inputs:\n</pre> <pre>      tiffs:\n</pre> <pre>        type: string[]\n</pre> <pre>      epsg_code:\n</pre> <pre>        type: string\n</pre> <pre>    outputs:\n</pre> <pre>      stacked:\n</pre> <pre>        type: File\n</pre> <pre>        outputBinding:\n</pre> <pre>          glob: warped.tif\n</pre> <pre>  - class: CommandLineTool\n</pre> <pre>    id: rio_color\n</pre> <pre>    requirements:\n</pre> <pre>      DockerRequirement:\n</pre> <pre>        dockerPull: ghcr.io/eoap/how-to/rio:1.0.0\n</pre> <pre>      InitialWorkDirRequirement:\n</pre> <pre>        listing:\n</pre> <pre>          - entryname: run.sh\n</pre> <pre>            entry: |-\n</pre> <pre>              #!/bin/bash\n</pre> <pre>              rio color -j -1 --out-dtype uint8 $1 rgb.tif \"gamma 3 0.95, sigmoidal rgb 35 0.13\"\n</pre> <pre>    baseCommand: [\"/bin/bash\", \"run.sh\"]\n</pre> <pre>    arguments:\n</pre> <pre>      - $( inputs.stacked.path )\n</pre> <pre>    inputs:\n</pre> <pre>      stacked:\n</pre> <pre>        type: File\n</pre> <pre>    outputs:\n</pre> <pre>      rgb:\n</pre> <pre>        type: File\n</pre> <pre>        outputBinding:\n</pre> <pre>          glob: rgb.tif\n</pre> <p>Its graphical representation:</p> <ol> <li>Conditional Steps</li> </ol> <p>Step 1: Use <code>rio_stack</code> for Native EPSG</p> <pre>step_stack:\n</pre> <pre>  in:\n</pre> <pre>    tiffs:\n</pre> <pre>      source: step_curl/hrefs\n</pre> <pre>    epsg_code: epsg_code\n</pre> <pre>  out:\n</pre> <pre>    - stacked\n</pre> <pre>  run: \"#rio_stack\"\n</pre> <pre>  when: $( inputs.epsg_code == \"native\")\n</pre> <ul> <li>Executes only if epsg_code == \"native\".</li> </ul> <p>Step 2: Use <code>rio_warp_stack</code> for Reprojection</p> <pre>step_warp_stack:\n</pre> <pre>  in:\n</pre> <pre>    tiffs:\n</pre> <pre>      source: step_curl/hrefs\n</pre> <pre>    epsg_code: epsg_code\n</pre> <pre>  out:\n</pre> <pre>    - stacked\n</pre> <pre>  run: \"#rio_warp_stack\"\n</pre> <pre>  when: $( inputs.epsg_code != \"native\")\n</pre> <ul> <li>Executes only if epsg_code != \"native\".</li> </ul> <ol> <li>Dynamic Output Selection</li> </ol> <p>Stack Selection</p> <pre>stack:\n</pre> <pre>  outputSource:\n</pre> <pre>    - step_stack/stacked\n</pre> <pre>    - step_warp_stack/stacked\n</pre> <pre>  pickValue: the_only_non_null\n</pre> <pre>  type: File\n</pre> <ul> <li>Dynamically selects the output from <code>step_stack</code> or <code>step_warp_stack</code>.</li> <li>Ensures the downstream step (<code>step_color</code>) receives the correct output.</li> </ul> <ol> <li>Run the Workflow</li> </ol> <p>Run the workflow with the following commands based on the desired EPSG code:</p> <p>Native EPSG Code:</p> <pre>cwltool conditional-workflows.cwl \\\n    --stac-item https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A  \\\n    --bands red \\\n    --bands green \\\n    --bands blue \\\n    --epsg_code native\n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.3/x64/bin/cwltool 3.1.20250110105449\n</pre> <pre>INFO Resolved '../cwl-workflows/conditional-workflows.cwl' to 'file:///home/runner/work/how-to/how-to/cwl-workflows/conditional-workflows.cwl'\n</pre> <pre>INFO [workflow ] start\n</pre> <pre>INFO [workflow ] starting step step_curl\n</pre> <pre>INFO [step step_curl] start\n</pre> <pre>INFO [job step_curl] /tmp/5y4b_pcv$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/5y4b_pcv,target=/LoYlMX \\\n</pre> <pre>    --mount=type=bind,source=/tmp/v77e3r40,target=/tmp \\\n</pre> <pre>    --workdir=/LoYlMX \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/u89_n799/20250620071701-788423.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/LoYlMX \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/5y4b_pcv/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10156  100 10156    0     0  29208      0 --:--:-- --:--:-- --:--:-- 29268\n</pre> <pre>INFO [job step_curl] completed success\n</pre> <pre>INFO [step step_curl] start\n</pre> <pre>INFO [job step_curl_2] /tmp/t1xh5mcu$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/t1xh5mcu,target=/LoYlMX \\\n</pre> <pre>    --mount=type=bind,source=/tmp/32x0yjti,target=/tmp \\\n</pre> <pre>    --workdir=/LoYlMX \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/ukx6vs4x/20250620071702-796322.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/LoYlMX \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/t1xh5mcu/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10156  100 10156    0     0  42304      0 --:--:-- --:--:-- --:--:-- 42493\n</pre> <pre>INFO [job step_curl_2] completed success\n</pre> <pre>INFO [step step_curl] start\n</pre> <pre>INFO [job step_curl_3] /tmp/jze3k0e2$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/jze3k0e2,target=/LoYlMX \\\n</pre> <pre>    --mount=type=bind,source=/tmp/bfi0p69x,target=/tmp \\\n</pre> <pre>    --workdir=/LoYlMX \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/x3efbe4u/20250620071703-804380.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/LoYlMX \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/jze3k0e2/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10156  100 10156    0     0  35779      0 --:--:-- --:--:-- --:--:-- 35886\n</pre> <pre>INFO [job step_curl_3] completed success\n</pre> <pre>INFO [step step_curl] completed success\n</pre> <pre>INFO [workflow ] starting step step_stack\n</pre> <pre>INFO [step step_stack] start\n</pre> <pre>INFO [job step_stack] /tmp/25h0dfwo$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/25h0dfwo,target=/LoYlMX \\\n</pre> <pre>    --mount=type=bind,source=/tmp/raab1cl2,target=/tmp \\\n</pre> <pre>    --workdir=/LoYlMX \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/tfmcgr4f/20250620071704-825154.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/LoYlMX \\\n</pre> <pre>    --env=CPL_VSIL_CURL_ALLOWED_EXTENSIONS=.tif \\\n</pre> <pre>    --env=GDAL_HTTP_MERGE_CONSECUTIVE_RANGES=YES \\\n</pre> <pre>    --env=GDAL_TIFF_INTERNAL_MASK=YES \\\n</pre> <pre>    ghcr.io/eoap/how-to/rio:1.0.0 \\\n</pre> <pre>    /bin/bash \\\n</pre> <pre>    run.sh \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B04.tif \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B03.tif \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B02.tif \\\n</pre> <pre>    stacked.tif\n</pre> <pre>INFO [job step_stack] Max memory used: 1254MiB\n</pre> <pre>INFO [job step_stack] completed success\n</pre> <pre>INFO [step step_stack] completed success\n</pre> <pre>INFO [workflow ] starting step step_warp_stack\n</pre> <pre>INFO [step step_warp_stack] will be skipped\n</pre> <pre>INFO [step step_warp_stack] completed skipped\n</pre> <pre>INFO [workflow ] starting step step_color\n</pre> <pre>INFO [step step_color] start\n</pre> <pre>INFO [job step_color] /tmp/ywsorz1g$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/ywsorz1g,target=/LoYlMX \\\n</pre> <pre>    --mount=type=bind,source=/tmp/1pioii06,target=/tmp \\\n</pre> <pre>    --mount=type=bind,source=/tmp/25h0dfwo/stacked.tif,target=/var/lib/cwl/stg431144cd-e3e6-44ef-b042-bd45b2d38efb/stacked.tif,readonly \\\n</pre> <pre>    --workdir=/LoYlMX \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/64jxhp4c/20250620071728-026550.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/LoYlMX \\\n</pre> <pre>    ghcr.io/eoap/how-to/rio:1.0.0 \\\n</pre> <pre>    /bin/bash \\\n</pre> <pre>    run.sh \\\n</pre> <pre>    /var/lib/cwl/stg431144cd-e3e6-44ef-b042-bd45b2d38efb/stacked.tif\n</pre> <pre>INFO [job step_color] Max memory used: 745MiB\n</pre> <pre>INFO [job step_color] completed success\n</pre> <pre>INFO [step step_color] completed success\n</pre> <pre>INFO [workflow ] completed success\n</pre> <pre>INFO Final process status is success\n</pre> <p>Reprojected EPSG Code</p> <pre>cwltool conditional-workflows.cwl \\\n    --stac-item https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A  \\\n    --bands red \\\n    --bands green \\\n    --bands blue \\\n    --epsg_code \"EPSG:4326\"\n</pre> <ol> <li>Expected Output</li> </ol> <p>Intermediate Outputs:</p> <ul> <li><code>stacked</code> file from either <code>step_stack</code> or <code>step_warp_stack</code>.</li> </ul> <p>Final Output:</p> <ul> <li><code>rgb-tif</code>: RGB composite file produced by <code>step_color</code>.</li> </ul> <pre>{\n</pre> <pre>  \"rgb-tif\": {\n</pre> <pre>    \"location\": \"file:///home/runner/work/how-to/how-to/docs/rgb.tif\",\n</pre> <pre>    \"basename\": \"rgb.tif\",\n</pre> <pre>    \"class\": \"File\",\n</pre> <pre>    \"checksum\": \"sha1$e0c93a3c483d93aae424fc9f04edc66033d8699f\",\n</pre> <pre>    \"size\": 361747464,\n</pre> <pre>    \"path\": \"/home/runner/work/how-to/how-to/docs/rgb.tif\"\n</pre> <pre>  },\n</pre> <pre>  \"stack\": {\n</pre> <pre>    \"location\": \"file:///home/runner/work/how-to/how-to/docs/stacked.tif\",\n</pre> <pre>    \"basename\": \"stacked.tif\",\n</pre> <pre>    \"class\": \"File\",\n</pre> <pre>    \"checksum\": \"sha1$a9fcfcac28c669f3714eaa4cc59858a28f1e715b\",\n</pre> <pre>    \"size\": 723450636,\n</pre> <pre>    \"path\": \"/home/runner/work/how-to/how-to/docs/stacked.tif\"\n</pre> <pre>  }\n</pre> <pre>}\n</pre>"},{"location":"conditional-workflows/#how-to-guide-using-conditional-workflows","title":"How-to Guide: Using Conditional Workflows\u00b6","text":"<p>This guide explains how to create workflows with conditional execution using <code>when</code> and <code>pickValue</code>.</p> <p>These features allow tasks to run conditionally based on inputs and dynamically select outputs.</p>"},{"location":"conditional-workflows/#objective","title":"Objective\u00b6","text":"<ol> <li>Process raster files using <code>rio_stack</code> if the EPSG code is <code>\"native\"</code>.</li> <li>Use <code>rio_warp_stack</code> if the EPSG code is not <code>\"native\"</code>.</li> <li>Dynamically choose the appropriate output using <code>pickValue: the_only_non_null</code>.</li> </ol>"},{"location":"conditional-workflows/#key-features","title":"Key Features\u00b6","text":"<ol> <li>Conditional Execution with <code>when</code></li> </ol> <p>The <code>when</code> field controls whether a step is executed based on an input condition.</p>"},{"location":"conditional-workflows/#steps","title":"Steps\u00b6","text":"<ol> <li>Define the Workflow</li> </ol> <p>Workflow Inputs and Outputs</p> <p>The workflow accepts:</p> <ul> <li><code>stac-item</code>: A STAC item URL.</li> <li><code>epsg_code</code>: EPSG code for projection (<code>default: \"native\"</code>).</li> <li><code>bands</code>: An array of band names (e.g., <code>[\"red\", \"green\", \"blue\"]</code>).</li> </ul> <p>Workflow Definition</p>"},{"location":"conditional-workflows/#key-takeaways","title":"Key Takeaways\u00b6","text":"<p>Conditional Steps:</p> <ul> <li>Use <code>when</code> to execute steps based on input conditions.</li> <li>Allows workflows to adapt to varying requirements dynamically.</li> </ul> <p>Dynamic Output Handling:</p> <ul> <li>Use <code>pickValue</code> to select the appropriate output among multiple sources.</li> </ul> <p>Flexible Workflows:</p> <ul> <li>This approach creates workflows that handle both native and reprojected data seamlessly.</li> </ul> <p>This guide demonstrates how to build adaptable workflows in CWL, leveraging conditional execution and dynamic output selection.</p>"},{"location":"environment-variable/","title":"How-to Guide: Setting Environment Variables","text":"<pre>EnvVarRequirement:\n</pre> <pre>  envDef:\n</pre> <pre>    GDAL_TIFF_INTERNAL_MASK: YES\n</pre> <pre>    GDAL_HTTP_MERGE_CONSECUTIVE_RANGES: YES\n</pre> <pre>    CPL_VSIL_CURL_ALLOWED_EXTENSIONS: \".tif\"\n</pre> <p>This configuration:</p> <ul> <li><code>GDAL_TIFF_INTERNAL_MASK</code>: Enables internal masking for TIFF files.</li> <li><code>GDAL_HTTP_MERGE_CONSECUTIVE_RANGES</code>: Optimizes HTTP range requests.</li> <li><code>CPL_VSIL_CURL_ALLOWED_EXTENSIONS</code>: Restricts allowed file extensions to <code>.tif</code>.</li> </ul> <ol> <li>Define the Environment Variables</li> </ol> <p>The <code>EnvVarRequirement</code> is applied in the <code>rio_stack</code> tool:</p> <p>Relevant Block</p> <pre>class: CommandLineTool\n</pre> <pre>id: rio_stack\n</pre> <pre>requirements:\n</pre> <pre>  DockerRequirement:\n</pre> <pre>    dockerPull: ghcr.io/eoap/how-to/rio:1.0.0\n</pre> <pre>  EnvVarRequirement:\n</pre> <pre>    envDef:\n</pre> <pre>      GDAL_TIFF_INTERNAL_MASK: YES\n</pre> <pre>      GDAL_HTTP_MERGE_CONSECUTIVE_RANGES: YES\n</pre> <pre>      CPL_VSIL_CURL_ALLOWED_EXTENSIONS: \".tif\"\n</pre> <pre>baseCommand: rio\n</pre> <pre>arguments:\n</pre> <pre>  - stack\n</pre> <pre>  - valueFrom: \"${  \\n  var arr = [];\\n  for(var i=0; i&lt;inputs.tiffs.length; i++) {\\n      arr.push(inputs.tiffs[i]); \\n  }\\n  return arr; \\n  }\\n\"\n</pre> <pre>  - stacked.tif\n</pre> <pre>inputs:\n</pre> <pre>  tiffs:\n</pre> <pre>    type: string[]\n</pre> <pre>outputs:\n</pre> <pre>  stacked:\n</pre> <pre>    type: File\n</pre> <pre>    outputBinding:\n</pre> <pre>      glob: stacked.tif\n</pre> <p>Key Elements</p> <ol> <li><code>EnvVarRequirement</code>: Specifies environment variables.</li> </ol> <ul> <li><code>envDef</code>: Key-value pairs of environment variables.</li> </ul> <ol> <li>Variables Defined:</li> </ol> <ul> <li><code>GDAL_TIFF_INTERNAL_MASK</code>: Enables internal TIFF masks.</li> <li><code>GDAL_HTTP_MERGE_CONSECUTIVE_RANGES</code>: Ensures efficient HTTP range fetching.</li> <li><code>CPL_VSIL_CURL_ALLOWED_EXTENSIONS</code>: Restricts file access to <code>.tif</code>.</li> </ul> <ol> <li>Workflow Overview</li> </ol> <p>The workflow orchestrates the process with three steps:</p> <ul> <li>Step 1: Fetch Band URLs</li> </ul> <p>The stac tool fetches asset URLs for the specified bands.</p> <ul> <li>Step 2: Stack TIFF Files</li> </ul> <p>The <code>rio_stack</code> tool stacks the band TIFFs into a single file (stacked.tif) using the environment variables defined in <code>EnvVarRequirement</code>.</p> <ul> <li>Step 3: Apply Color Correction</li> </ul> <p>The <code>rio_color</code> tool applies color correction and generates an RGB TIFF (rgb.tif).</p> <ol> <li>Run the Workflow</li> </ol> <p>Use the following command to execute the workflow:</p> <pre>cwltool environment-variable.cwl \\\n    --stac-item https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A \\\n    --bands red \\\n    --bands green \\\n    --bands blue \n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.3/x64/bin/cwltool 3.1.20250110105449\n</pre> <pre>INFO Resolved '../cwl-workflows/environment-variable.cwl' to 'file:///home/runner/work/how-to/how-to/cwl-workflows/environment-variable.cwl'\n</pre> <pre>INFO [workflow ] start\n</pre> <pre>INFO [workflow ] starting step step_curl\n</pre> <pre>INFO [step step_curl] start\n</pre> <pre>INFO [job step_curl] /tmp/ml0zgr4c$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/ml0zgr4c,target=/beRhCb \\\n</pre> <pre>    --mount=type=bind,source=/tmp/ka7zmayj,target=/tmp \\\n</pre> <pre>    --workdir=/beRhCb \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/3kqntzar/20250620071747-094296.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/beRhCb \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/ml0zgr4c/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10156  100 10156    0     0  29660      0 --:--:-- --:--:-- --:--:-- 29609\n</pre> <pre>INFO [job step_curl] completed success\n</pre> <pre>INFO [step step_curl] start\n</pre> <pre>INFO [job step_curl_2] /tmp/u44eyvrq$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/u44eyvrq,target=/beRhCb \\\n</pre> <pre>    --mount=type=bind,source=/tmp/a34jat8a,target=/tmp \\\n</pre> <pre>    --workdir=/beRhCb \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/y2149c2b/20250620071748-101129.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/beRhCb \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/u44eyvrq/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10156  100 10156    0     0  36957      0 --:--:-- --:--:-- --:--:-- 36930\r</pre> <pre>100 10156  100 10156    0     0  36941      0 --:--:-- --:--:-- --:--:-- 36930\n</pre> <pre>INFO [job step_curl_2] completed success\n</pre> <pre>INFO [step step_curl] start\n</pre> <pre>INFO [job step_curl_3] /tmp/1h2h54uy$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/1h2h54uy,target=/beRhCb \\\n</pre> <pre>    --mount=type=bind,source=/tmp/lb_h8vj9,target=/tmp \\\n</pre> <pre>    --workdir=/beRhCb \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/hedztawx/20250620071749-108542.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/beRhCb \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/1h2h54uy/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10156  100 10156    0     0  53654      0 --:--:-- --:--:-- --:--:-- 53735\n</pre> <pre>INFO [job step_curl_3] completed success\n</pre> <pre>INFO [step step_curl] completed success\n</pre> <pre>INFO [workflow ] starting step step_stack\n</pre> <pre>INFO [step step_stack] start\n</pre> <pre>INFO [job step_stack] /tmp/oasuf6m1$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/oasuf6m1,target=/beRhCb \\\n</pre> <pre>    --mount=type=bind,source=/tmp/cqar8v6r,target=/tmp \\\n</pre> <pre>    --workdir=/beRhCb \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/gktru28j/20250620071750-129256.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/beRhCb \\\n</pre> <pre>    --env=CPL_VSIL_CURL_ALLOWED_EXTENSIONS=.tif \\\n</pre> <pre>    --env=GDAL_HTTP_MERGE_CONSECUTIVE_RANGES=YES \\\n</pre> <pre>    --env=GDAL_TIFF_INTERNAL_MASK=YES \\\n</pre> <pre>    ghcr.io/eoap/how-to/rio:1.0.0 \\\n</pre> <pre>    rio \\\n</pre> <pre>    stack \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B04.tif \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B03.tif \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B02.tif \\\n</pre> <pre>    stacked.tif\n</pre> <pre>INFO [job step_stack] Max memory used: 1218MiB\n</pre> <pre>INFO [job step_stack] completed success\n</pre> <pre>INFO [step step_stack] completed success\n</pre> <pre>INFO [workflow ] starting step step_color\n</pre> <pre>INFO [step step_color] start\n</pre> <pre>INFO [job step_color] /tmp/pk_yiqqk$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/pk_yiqqk,target=/beRhCb \\\n</pre> <pre>    --mount=type=bind,source=/tmp/1_d7izn9,target=/tmp \\\n</pre> <pre>    --mount=type=bind,source=/tmp/oasuf6m1/stacked.tif,target=/var/lib/cwl/stgf7b8fc69-cb2c-4add-ab9c-0d2d1111b141/stacked.tif,readonly \\\n</pre> <pre>    --workdir=/beRhCb \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/ha47sxh4/20250620071809-564278.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/beRhCb \\\n</pre> <pre>    ghcr.io/eoap/how-to/rio:1.0.0 \\\n</pre> <pre>    rio \\\n</pre> <pre>    color \\\n</pre> <pre>    -j \\\n</pre> <pre>    -1 \\\n</pre> <pre>    --out-dtype \\\n</pre> <pre>    uint8 \\\n</pre> <pre>    /var/lib/cwl/stgf7b8fc69-cb2c-4add-ab9c-0d2d1111b141/stacked.tif \\\n</pre> <pre>    rgb.tif \\\n</pre> <pre>    'gamma 3 0.95, sigmoidal rgb 35 0.13'\n</pre> <pre>INFO [job step_color] Max memory used: 723MiB\n</pre> <pre>INFO [job step_color] completed success\n</pre> <pre>INFO [step step_color] completed success\n</pre> <pre>INFO [workflow ] completed success\n</pre> <pre>INFO Final process status is success\n</pre> <ol> <li>Expected Output</li> </ol> <p>The workflow processes the STAC item and generates:</p> <ul> <li>Final Output (<code>rgb.tif</code>): The RGB TIFF file with color correction applied.</li> </ul> <pre>{\n</pre> <pre>  \"rgb-tif\": {\n</pre> <pre>    \"location\": \"file:///home/runner/work/how-to/how-to/docs/rgb.tif\",\n</pre> <pre>    \"basename\": \"rgb.tif\",\n</pre> <pre>    \"class\": \"File\",\n</pre> <pre>    \"checksum\": \"sha1$f405ac3a93062fc04dbede72dee410806c23717b\",\n</pre> <pre>    \"size\": 361747464,\n</pre> <pre>    \"path\": \"/home/runner/work/how-to/how-to/docs/rgb.tif\"\n</pre> <pre>  }\n</pre> <pre>}\n</pre>"},{"location":"environment-variable/#how-to-guide-setting-environment-variables","title":"How-to Guide: Setting Environment Variables\u00b6","text":"<p>This guide explains how to use <code>EnvVarRequirement</code> to set environment variables in a CWL workflow.</p> <p>We will focus on the <code>EnvVarRequirement</code> block and its usage in the example provided.</p>"},{"location":"environment-variable/#objective","title":"Objective\u00b6","text":"<p>Set specific environment variables for a command-line tool in CWL to configure its behavior dynamically.</p> <p>Relevant Block:</p>"},{"location":"environment-variable/#steps","title":"Steps\u00b6","text":"<ol> <li>Understand the CWL Workflow Structure</li> </ol> <p>The workflow (<code>environment-variable.cwl</code>) processes a Sentinel-2 STAC item to:</p> <ul> <li>Fetch band URLs: The <code>stac</code> tool retrieves asset URLs for specified bands.</li> <li>Stack TIFFs: The <code>rio_stack</code> tool stacks these bands into a single file.</li> <li>Apply color correction: The <code>rio_color</code> tool processes the stacked file to create an RGB TIFF.</li> </ul>"},{"location":"environment-variable/#key-takeaways","title":"Key Takeaways\u00b6","text":"<ol> <li>Setting Environment Variables:</li> </ol> <ul> <li>Use <code>EnvVarRequirement</code> to configure the runtime environment for a tool.</li> <li>Define key-value pairs in the <code>envDef</code> field.</li> </ul> <ol> <li>Optimizing with Environment Variables:</li> </ol> <ul> <li><code>GDAL_TIFF_INTERNAL_MASK</code>: Improves TIFF file processing.</li> <li><code>GDAL_HTTP_MERGE_CONSECUTIVE_RANGES</code>: Reduces HTTP overhead.</li> <li><code>CPL_VSIL_CURL_ALLOWED_EXTENSIONS</code>: Ensures only <code>.tif</code> files are accessed.</li> </ul> <p>By focusing on the <code>EnvVarRequirement</code> block, you can customize tool behavior to meet specific requirements in your CWL workflows.</p>"},{"location":"nested-workflows/","title":"How-to Guide: Creating Nested Workflows in CWL","text":"<pre>requirements:\n</pre> <pre>  SubworkflowFeatureRequirement: {}\n</pre> <ol> <li>Subworkflow Step Definition</li> </ol> <p>The main workflow calls the <code>subworkflow</code> using:</p> <pre>step_rgb_composite:\n</pre> <pre>  in:\n</pre> <pre>    stac-item: stac-item\n</pre> <pre>    bands: bands\n</pre> <pre>  out:\n</pre> <pre>    - rgb-tif\n</pre> <pre>  run: \"#rgb-composite\"\n</pre> <ul> <li><p><code>run: \"#rgb-composite\"</code>: Links to the <code>rgb-composite</code> subworkflow.</p> </li> <li><p>Inputs and Outputs: The subworkflow accepts inputs (<code>stac-item</code>, <code>bands</code>) and produces an output (<code>rgb-tif</code>).</p> </li> </ul> <p>Subworkflow Definition (<code>rgb-composite</code>)</p> <pre>class: Workflow\n</pre> <pre>id: rgb-composite\n</pre> <pre>requirements:\n</pre> <pre>  InlineJavascriptRequirement: {}\n</pre> <pre>  NetworkAccess:\n</pre> <pre>    networkAccess: true\n</pre> <pre>  ScatterFeatureRequirement: {}\n</pre> <pre>inputs:\n</pre> <pre>  stac-item:\n</pre> <pre>    type: string\n</pre> <pre>  bands:\n</pre> <pre>    type: string[]\n</pre> <pre>outputs:\n</pre> <pre>  rgb-tif:\n</pre> <pre>    outputSource: step_color/rgb\n</pre> <pre>    type: File\n</pre> <pre>steps:\n</pre> <pre>  step_curl:\n</pre> <pre>    in:\n</pre> <pre>      stac_item: stac-item\n</pre> <pre>      common_band_name: bands\n</pre> <pre>    out:\n</pre> <pre>      - hrefs\n</pre> <pre>    run: \"#stac\"\n</pre> <pre>    scatter: common_band_name\n</pre> <pre>    scatterMethod: dotproduct\n</pre> <pre>  step_stack:\n</pre> <pre>    in:\n</pre> <pre>      tiffs:\n</pre> <pre>        source: step_curl/hrefs\n</pre> <pre>    out:\n</pre> <pre>      - stacked\n</pre> <pre>    run: \"#rio_stack\"\n</pre> <pre>  step_color:\n</pre> <pre>    in:\n</pre> <pre>      stacked:\n</pre> <pre>        source: step_stack/stacked\n</pre> <pre>    out:\n</pre> <pre>      - rgb\n</pre> <pre>    run: \"#rio_color\"\n</pre> <ol> <li>Define the Main Workflow</li> </ol> <p>The main workflow invokes the rgb-composite subworkflow:</p> <pre>class: Workflow\n</pre> <pre>id: main\n</pre> <pre>requirements:\n</pre> <pre>  SubworkflowFeatureRequirement: {}\n</pre> <pre>  InlineJavascriptRequirement: {}\n</pre> <pre>  NetworkAccess:\n</pre> <pre>    networkAccess: true\n</pre> <pre>  ScatterFeatureRequirement: {}\n</pre> <pre>inputs:\n</pre> <pre>  stac-item:\n</pre> <pre>    type: string\n</pre> <pre>  bands:\n</pre> <pre>    type: string[]\n</pre> <pre>    default: [\"red\", \"green\", \"blue\"]\n</pre> <pre>outputs:\n</pre> <pre>  rgb-tif:\n</pre> <pre>    outputSource: step_rgb_composite/rgb-tif\n</pre> <pre>    type: File\n</pre> <pre>steps:\n</pre> <pre>  step_rgb_composite:\n</pre> <pre>    in:\n</pre> <pre>      stac-item: stac-item\n</pre> <pre>      bands: bands\n</pre> <pre>    out:\n</pre> <pre>      - rgb-tif\n</pre> <pre>    run: \"#rgb-composite\"\n</pre> <ul> <li><p>Requirements:</p> <ul> <li><code>SubworkflowFeatureRequirement</code>: Enables the use of nested workflows.</li> <li><code>ScatterFeatureRequirement</code>: Allows processing multiple bands simultaneously.</li> </ul> </li> <li><p>Inputs:</p> <ul> <li><code>stac-item</code>: URL to a STAC item.</li> <li><code>bands</code>: Array of band names (<code>default: [\"red\", \"green\", \"blue\"]</code>).</li> </ul> </li> <li><p>Outputs:</p> <ul> <li><code>rgb-tif</code>: The RGB composite file produced by the subworkflow.</li> </ul> </li> </ul> <ol> <li>Run the Workflow</li> </ol> <p>To execute the main workflow, use the following command:</p> <pre>cwltool nested-workflow.cwl \\\n  --stac-item https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A \n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.3/x64/bin/cwltool 3.1.20250110105449\n</pre> <pre>INFO Resolved '../cwl-workflows/nested-workflow.cwl' to 'file:///home/runner/work/how-to/how-to/cwl-workflows/nested-workflow.cwl'\n</pre> <pre>INFO [workflow ] start\n</pre> <pre>INFO [workflow ] starting step step_rgb_composite\n</pre> <pre>INFO [step step_rgb_composite] start\n</pre> <pre>INFO [workflow step_rgb_composite] start\n</pre> <pre>INFO [workflow step_rgb_composite] starting step step_curl\n</pre> <pre>INFO [step step_curl] start\n</pre> <pre>INFO [job step_curl] /tmp/pufx_v3d$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/pufx_v3d,target=/yZUdzu \\\n</pre> <pre>    --mount=type=bind,source=/tmp/7eymyjv6,target=/tmp \\\n</pre> <pre>    --workdir=/yZUdzu \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/cakv9aaf/20250620071829-260192.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/yZUdzu \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/pufx_v3d/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10156  100 10156    0     0  44020      0 --:--:-- --:--:-- --:--:-- 43965\n</pre> <pre>INFO [job step_curl] completed success\n</pre> <pre>INFO [step step_curl] start\n</pre> <pre>INFO [job step_curl_2] /tmp/sxcka5p1$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/sxcka5p1,target=/yZUdzu \\\n</pre> <pre>    --mount=type=bind,source=/tmp/hionhjgm,target=/tmp \\\n</pre> <pre>    --workdir=/yZUdzu \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/3t4e8won/20250620071830-267272.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/yZUdzu \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/sxcka5p1/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10156  100 10156    0     0  47808      0 --:--:-- --:--:-- --:--:-- 47680\n</pre> <pre>INFO [job step_curl_2] completed success\n</pre> <pre>INFO [step step_curl] start\n</pre> <pre>INFO [job step_curl_3] /tmp/twxvo_8b$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/twxvo_8b,target=/yZUdzu \\\n</pre> <pre>    --mount=type=bind,source=/tmp/rwhcvgjb,target=/tmp \\\n</pre> <pre>    --workdir=/yZUdzu \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/vpt14fg_/20250620071831-274759.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/yZUdzu \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/twxvo_8b/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10156  100 10156    0     0  45382      0 --:--:-- --:--:-- --:--:-- 45339\n</pre> <pre>INFO [job step_curl_3] completed success\n</pre> <pre>INFO [step step_curl] completed success\n</pre> <pre>INFO [workflow step_rgb_composite] starting step step_stack\n</pre> <pre>INFO [step step_stack] start\n</pre> <pre>INFO [job step_stack] /tmp/e53l9l2z$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/e53l9l2z,target=/yZUdzu \\\n</pre> <pre>    --mount=type=bind,source=/tmp/rn2471xj,target=/tmp \\\n</pre> <pre>    --workdir=/yZUdzu \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/29_fbisl/20250620071832-296183.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/yZUdzu \\\n</pre> <pre>    --env=CPL_VSIL_CURL_ALLOWED_EXTENSIONS=.tif \\\n</pre> <pre>    --env=GDAL_HTTP_MERGE_CONSECUTIVE_RANGES=YES \\\n</pre> <pre>    --env=GDAL_TIFF_INTERNAL_MASK=YES \\\n</pre> <pre>    ghcr.io/eoap/how-to/rio:1.0.0 \\\n</pre> <pre>    rio \\\n</pre> <pre>    stack \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B04.tif \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B03.tif \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B02.tif \\\n</pre> <pre>    stacked.tif\n</pre> <pre>INFO [job step_stack] Max memory used: 1199MiB\n</pre> <pre>INFO [job step_stack] completed success\n</pre> <pre>INFO [step step_stack] completed success\n</pre> <pre>INFO [workflow step_rgb_composite] starting step step_color\n</pre> <pre>INFO [step step_color] start\n</pre> <pre>INFO [job step_color] /tmp/rri4c0zo$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/rri4c0zo,target=/yZUdzu \\\n</pre> <pre>    --mount=type=bind,source=/tmp/m1rd6m6g,target=/tmp \\\n</pre> <pre>    --mount=type=bind,source=/tmp/e53l9l2z/stacked.tif,target=/var/lib/cwl/stgb368b707-6529-4134-9bbd-6700eb174bde/stacked.tif,readonly \\\n</pre> <pre>    --workdir=/yZUdzu \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/thowdx3l/20250620071851-051982.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/yZUdzu \\\n</pre> <pre>    ghcr.io/eoap/how-to/rio:1.0.0 \\\n</pre> <pre>    rio \\\n</pre> <pre>    color \\\n</pre> <pre>    -j \\\n</pre> <pre>    -1 \\\n</pre> <pre>    --out-dtype \\\n</pre> <pre>    uint8 \\\n</pre> <pre>    /var/lib/cwl/stgb368b707-6529-4134-9bbd-6700eb174bde/stacked.tif \\\n</pre> <pre>    rgb.tif \\\n</pre> <pre>    'gamma 3 0.95, sigmoidal rgb 35 0.13'\n</pre> <pre>INFO [job step_color] Max memory used: 786MiB\n</pre> <pre>INFO [job step_color] completed success\n</pre> <pre>INFO [step step_color] completed success\n</pre> <pre>INFO [workflow step_rgb_composite] completed success\n</pre> <pre>INFO [step step_rgb_composite] completed success\n</pre> <pre>INFO [workflow ] completed success\n</pre> <pre>INFO Final process status is success\n</pre> <ol> <li>Expected Output</li> </ol> <p>Intermediate Outputs:</p> <ul> <li>URLs of band-specific TIFFs (hrefs).</li> <li>Stacked TIFF file (stacked.tif).</li> </ul> <p>Final Output:</p> <ul> <li>RGB composite TIFF file (rgb-tif).</li> </ul> <pre>{\n</pre> <pre>  \"rgb-tif\": {\n</pre> <pre>    \"location\": \"file:///home/runner/work/how-to/how-to/docs/rgb.tif\",\n</pre> <pre>    \"basename\": \"rgb.tif\",\n</pre> <pre>    \"class\": \"File\",\n</pre> <pre>    \"checksum\": \"sha1$dc1b292898d647116fdb31ec9c04be3a6ff9e5e9\",\n</pre> <pre>    \"size\": 361747464,\n</pre> <pre>    \"path\": \"/home/runner/work/how-to/how-to/docs/rgb.tif\"\n</pre> <pre>  }\n</pre> <pre>}\n</pre>"},{"location":"nested-workflows/#how-to-guide-creating-nested-workflows-in-cwl","title":"How-to Guide: Creating Nested Workflows in CWL\u00b6","text":"<p>This guide explains how to build and use nested workflows in CWL by leveraging the <code>SubworkflowFeatureRequirement</code>.</p> <p>The focus is on the workflow composition and the integration of subworkflows to create reusable components.</p>"},{"location":"nested-workflows/#objective","title":"Objective\u00b6","text":"<ul> <li>Main Workflow: Accepts inputs and calls a subworkflow (<code>rgb-composite</code>) as a single step.</li> <li>Subworkflow (<code>rgb-composite</code>): Performs a series of steps to process data and produce the desired output.</li> </ul>"},{"location":"nested-workflows/#key-blocks","title":"Key Blocks\u00b6","text":"<ol> <li><code>SubworkflowFeatureRequirement</code></li> </ol> <ul> <li>The <code>SubworkflowFeatureRequirement</code> allows workflows to include other workflows as steps.</li> </ul>"},{"location":"nested-workflows/#steps","title":"Steps\u00b6","text":"<ol> <li>Define the Subworkflow</li> </ol> <p>The <code>rgb-composite</code> subworkflow performs the following:</p> <ul> <li>Fetch band-specific asset URLs using the <code>stac</code> tool.</li> <li>Stack the asset TIFFs into a single file using the <code>rio_stack</code> tool.</li> <li>Apply color correction to generate the RGB composite using the <code>rio_color</code> tool.</li> </ul>"},{"location":"nested-workflows/#key-takeaways","title":"Key Takeaways\u00b6","text":"<p>Modularity with Subworkflows:</p> <ul> <li>Use <code>SubworkflowFeatureRequirement</code> to encapsulate reusable workflows.</li> <li>Subworkflows simplify complex workflows by isolating specific logic.</li> </ul> <p>Integration of Subworkflows:</p> <ul> <li>Define subworkflow steps in the main workflow.</li> <li>Use run to link the subworkflow.</li> </ul> <p>Reusability:</p> <ul> <li>Subworkflows can be reused in multiple workflows, promoting modularity and efficiency.</li> </ul> <p>This approach makes it easy to manage and scale CWL workflows by leveraging nested subworkflows.</p>"},{"location":"return-output-file/","title":"How-to Guide: Capturing stdout with CWL","text":"<pre>outputs:\n</pre> <pre>  preview:\n</pre> <pre>    type: File\n</pre> <pre>    outputBinding:\n</pre> <pre>      glob: preview.png\n</pre> <p>This block ensures the tool captures and returns the <code>preview.png</code> file generated during execution.</p> <pre>outputs:\n</pre> <pre>  preview:\n</pre> <pre>    type: File\n</pre> <pre>    outputBinding:\n</pre> <pre>      glob: preview.png\n</pre> <ul> <li><code>glob: preview.png</code>: Ensures the tool captures the file <code>preview.png</code> generated by the <code>rio convert</code> command.</li> </ul> <ol> <li>Review the return-output-file.cwl Workflow</li> </ol> <p>The workflow (return-output-file.cwl) is defined as:</p> <pre>cwlVersion: v1.2\n</pre> <pre>$graph:\n</pre> <pre>  - class: Workflow\n</pre> <pre>    id: main\n</pre> <pre>    inputs:\n</pre> <pre>      tif:\n</pre> <pre>        type: string\n</pre> <pre>        label: URL to a Sentinel-2 TCI GeoTIFF\n</pre> <pre>        doc: URL to a Sentinel-2 True Colour Image GeoTIFF file (TCI.tif)\n</pre> <pre>    outputs:\n</pre> <pre>      preview:\n</pre> <pre>        outputSource: step-convert/preview\n</pre> <pre>        type: File\n</pre> <pre>        label: True Colour Image preview\n</pre> <pre>        doc: True Colour Image preview in PNG format\n</pre> <pre>    steps:\n</pre> <pre>      step-convert:\n</pre> <pre>        in:\n</pre> <pre>          geotif: tif\n</pre> <pre>        out:\n</pre> <pre>          - preview\n</pre> <pre>        run: \"#rio\"\n</pre> <pre>  - class: CommandLineTool\n</pre> <pre>    id: rio\n</pre> <pre>    label: Rasterio command line tool\n</pre> <pre>    doc: Convert a GeoTIFF file to a PNG file using rio convert\n</pre> <pre>    requirements:\n</pre> <pre>      NetworkAccess:\n</pre> <pre>        networkAccess: true\n</pre> <pre>      InlineJavascriptRequirement: {}\n</pre> <pre>      DockerRequirement:\n</pre> <pre>        dockerPull: ghcr.io/eoap/how-to/rio:1.0.0\n</pre> <pre>    baseCommand: rio\n</pre> <pre>    arguments:\n</pre> <pre>      - convert\n</pre> <pre>      - --driver\n</pre> <pre>      - PNG\n</pre> <pre>      - --dtype\n</pre> <pre>      - uint8\n</pre> <pre>      - $(inputs.geotif)\n</pre> <pre>      - preview.png\n</pre> <pre>    inputs:\n</pre> <pre>      geotif:\n</pre> <pre>        type: string\n</pre> <pre>    outputs:\n</pre> <pre>      preview:\n</pre> <pre>        type: File\n</pre> <pre>        outputBinding:\n</pre> <pre>          glob: preview.png\n</pre> <p>It's graphical representation:</p> <ol> <li>Provide Input Parameters</li> </ol> <p>Create an input file <code>inputs.yml</code> with the GeoTIFF URL:</p> <pre>tif: \"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/10/T/FK/2021/7/S2B_10TFK_20210713_0_L2A/TCI.tif\"\n</pre> <ol> <li>Execute the Workflow</li> </ol> <p>Run the workflow using <code>cwltool</code>:</p> <pre>cwltool return-output-file input.yml\n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.3/x64/bin/cwltool 3.1.20250110105449\n</pre> <pre>INFO Resolved '../cwl-workflows/return-output-file.cwl' to 'file:///home/runner/work/how-to/how-to/cwl-workflows/return-output-file.cwl'\n</pre> <pre>INFO [workflow ] start\n</pre> <pre>INFO [workflow ] starting step step-convert\n</pre> <pre>INFO [step step-convert] start\n</pre> <pre>INFO [job step-convert] /tmp/iei5vir9$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/iei5vir9,target=/IbJkOT \\\n</pre> <pre>    --mount=type=bind,source=/tmp/1ehwlexm,target=/tmp \\\n</pre> <pre>    --workdir=/IbJkOT \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/dmurmbe6/20250620071908-687653.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/IbJkOT \\\n</pre> <pre>    ghcr.io/eoap/how-to/rio:1.0.0 \\\n</pre> <pre>    rio \\\n</pre> <pre>    convert \\\n</pre> <pre>    --driver \\\n</pre> <pre>    PNG \\\n</pre> <pre>    --dtype \\\n</pre> <pre>    uint8 \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/10/T/FK/2021/7/S2B_10TFK_20210713_0_L2A/TCI.tif \\\n</pre> <pre>    preview.png\n</pre> <pre>WARNING:rasterio._env:CPLE_NotSupported in driver PNG does not support creation option BLOCKXSIZE\n</pre> <pre>WARNING:rasterio._env:CPLE_NotSupported in driver PNG does not support creation option BLOCKYSIZE\n</pre> <pre>WARNING:rasterio._env:CPLE_NotSupported in driver PNG does not support creation option TILED\n</pre> <pre>WARNING:rasterio._env:CPLE_NotSupported in driver PNG does not support creation option COMPRESS\n</pre> <pre>WARNING:rasterio._env:CPLE_NotSupported in driver PNG does not support creation option INTERLEAVE\n</pre> <pre>INFO [job step-convert] Max memory used: 1134MiB\n</pre> <pre>INFO [job step-convert] completed success\n</pre> <pre>INFO [step step-convert] completed success\n</pre> <pre>INFO [workflow ] completed success\n</pre> <pre>INFO Final process status is success\n</pre> <pre>{\"preview\": {\"location\": \"file:///home/runner/work/how-to/how-to/docs/preview.png\", \"basename\": \"preview.png\", \"class\": \"File\", \"checksum\": \"sha1$e1538ef65976d4748dc58393fe8d0b78b4736f38\", \"size\": 237388032, \"path\": \"/home/runner/work/how-to/how-to/docs/preview.png\"}}\n</pre> <p>The <code>preview.png</code> file is now accessible in the working directory or as defined by the CWL runner.</p>"},{"location":"return-output-file/#how-to-guide-capturing-stdout-with-cwl","title":"How-to Guide: Capturing stdout with CWL\u00b6","text":"<p>This guide explains how to capture the standard output (<code>stdout</code>) of a <code>CommandLineTool</code> in CWL.</p> <p>The example focuses on the <code>stdout</code> and <code>outputs</code> blocks to save the tool's output to a file and make it available for further use.</p>"},{"location":"return-output-file/#objective","title":"Objective\u00b6","text":"<p>Convert a Sentinel-2 GeoTIFF file into a PNG image.</p> <p>Capture the generated PNG file as the tool's output using the outputs block.</p>"},{"location":"return-output-file/#steps","title":"Steps\u00b6","text":"<ol> <li>Understand the outputs Block</li> </ol> <p>In CWL, the outputs block specifies:</p> <ul> <li>Name: <code>preview</code> \u2013 the logical name of the output.</li> <li>Type: <code>File</code> \u2013 indicates the output is a file.</li> <li><code>outputBinding.glob</code>: Specifies the file's name or pattern to locate the file in the tool's working directory.</li> </ul> <p>From the example:</p>"},{"location":"return-output-file/#expected-output","title":"Expected Output\u00b6","text":"<p>The <code>rio</code> tool processes the input GeoTIFF and generates a PNG file named <code>preview.png</code>.</p> <p>The <code>outputs</code> block ensures:</p> <ul> <li>The file is located using <code>glob: preview.png</code>.</li> <li>It is made available as the workflow output.</li> </ul> <p>Example Workflow Output:</p>"},{"location":"return-output-file/#key-takeaways","title":"Key Takeaways\u00b6","text":"<ul> <li><p>The <code>outputs</code> block defines how to capture and return files:</p> <ul> <li><code>type: File</code>: Specifies the output type.</li> <li><code>outputBinding.glob</code>: Matches the file name or pattern.</li> </ul> </li> <li><p>Ensure the file name in glob matches the file name generated by the tool (preview.png).</p> </li> </ul> <p>By focusing on the <code>outputs</code> block, this guide highlights how to capture and return output files in CWL workflows.</p>"},{"location":"runtime-file/","title":"How-to Guide: Creating Files at Runtime","text":"<p>Relevant Block:</p> <pre>InitialWorkDirRequirement:\n</pre> <pre>  listing:\n</pre> <pre>    - entryname: run.sh\n</pre> <pre>      entry: |-\n</pre> <pre>        #!/bin/bash\n</pre> <pre>        rio stack $@\n</pre> <pre>\n</pre> <ul> <li><code>InitialWorkDirRequirement</code>: Specifies files or directories to be created dynamically in the working directory.</li> <li><code>entryname</code>: The name of the file to be created (<code>run.sh</code>).</li> <li><code>entry</code>: The contents of the file, which in this case is a shell script.</li> </ul> <ol> <li>Define the InitialWorkDirRequirement</li> </ol> <p>For <code>rio_stack</code> Tool</p> <p>The <code>run.sh</code> script stacks the provided TIFFs into a single file (stacked.tif):</p> <pre>InitialWorkDirRequirement:\n</pre> <pre>  listing:\n</pre> <pre>    - entryname: run.sh\n</pre> <pre>      entry: |-\n</pre> <pre>        #!/bin/bash\n</pre> <pre>        rio stack $@\n</pre> <pre>\n</pre> <ul> <li>Contents:<ul> <li>The script (<code>run.sh</code>) executes rio stack with all TIFF file paths passed as arguments ($@).</li> </ul> </li> </ul> <p>For <code>rio_color</code> Tool</p> <p>The <code>run.sh</code> script applies color correction to the stacked TIFF file and produces an RGB TIFF (rgb.tif):</p> <pre>InitialWorkDirRequirement:\n</pre> <pre>  listing:\n</pre> <pre>    - entryname: run.sh\n</pre> <pre>      entry: |-\n</pre> <pre>        #!/bin/bash\n</pre> <pre>        rio color -j -1 --out-dtype uint8 $1 rgb.tif \"gamma 3 0.95, sigmoidal rgb 35 0.13\"\n</pre> <pre>\n</pre> <ul> <li>Contents:<ul> <li>The script (<code>run.sh</code>) applies color correction to the file passed as the first argument ($1).</li> </ul> </li> </ul> <ol> <li>Specify the baseCommand</li> </ol> <p>Each tool uses <code>/bin/bash</code> to execute the dynamically created <code>run.sh</code> script:</p> <pre>baseCommand: [\"/bin/bash\", \"run.sh\"]\n</pre> <p>This ensures the created script <code>run.sh</code> is executed in a shell environment.</p> <ol> <li>Complete Workflow Example</li> </ol> <p>Here\u2019s the full CWL example (<code>runtime-file.cwl</code>):</p> <pre>cwlVersion: v1.2\n</pre> <pre>$graph:\n</pre> <pre>  - class: Workflow\n</pre> <pre>    id: main\n</pre> <pre>    requirements:\n</pre> <pre>      InlineJavascriptRequirement: {}\n</pre> <pre>      NetworkAccess:\n</pre> <pre>        networkAccess: true\n</pre> <pre>      ScatterFeatureRequirement: {}\n</pre> <pre>    inputs:\n</pre> <pre>      stac-item:\n</pre> <pre>        type: string\n</pre> <pre>      bands:\n</pre> <pre>        type: string[]\n</pre> <pre>    outputs:\n</pre> <pre>      rgb-tif:\n</pre> <pre>        outputSource: step_color/rgb\n</pre> <pre>        type: File\n</pre> <pre>    steps:\n</pre> <pre>      step_curl:\n</pre> <pre>        in:\n</pre> <pre>          stac_item: stac-item\n</pre> <pre>          common_band_name: bands\n</pre> <pre>        out:\n</pre> <pre>          - hrefs\n</pre> <pre>        run: \"#stac\"\n</pre> <pre>        scatter: common_band_name\n</pre> <pre>        scatterMethod: dotproduct\n</pre> <pre>      step_stack:\n</pre> <pre>        in:\n</pre> <pre>          tiffs:\n</pre> <pre>            source: step_curl/hrefs\n</pre> <pre>        out:\n</pre> <pre>          - stacked\n</pre> <pre>        run: \"#rio_stack\"\n</pre> <pre>      step_color:\n</pre> <pre>        in:\n</pre> <pre>          stacked:\n</pre> <pre>            source: step_stack/stacked\n</pre> <pre>        out:\n</pre> <pre>          - rgb\n</pre> <pre>        run: \"#rio_color\"\n</pre> <pre>  - class: CommandLineTool\n</pre> <pre>    id: stac\n</pre> <pre>    requirements:\n</pre> <pre>      DockerRequirement:\n</pre> <pre>        dockerPull: docker.io/curlimages/curl:latest\n</pre> <pre>    baseCommand: curl\n</pre> <pre>    stdout: message\n</pre> <pre>    arguments:\n</pre> <pre>      - $( inputs.stac_item )\n</pre> <pre>    inputs:\n</pre> <pre>      stac_item:\n</pre> <pre>        type: string\n</pre> <pre>      common_band_name:\n</pre> <pre>        type: string\n</pre> <pre>    outputs:\n</pre> <pre>      hrefs:\n</pre> <pre>        type: string\n</pre> <pre>        outputBinding:\n</pre> <pre>          glob: message\n</pre> <pre>          loadContents: true\n</pre> <pre>          outputEval: |\n</pre> <pre>            ${\n</pre> <pre>              const assets = JSON.parse(self[0].contents).assets;\n</pre> <pre>              const bandKey = Object.keys(assets).find(key =&gt;\n</pre> <pre>                assets[key]['eo:bands'] &amp;&amp;\n</pre> <pre>                assets[key]['eo:bands'].length === 1 &amp;&amp;\n</pre> <pre>                assets[key]['eo:bands'].some(band =&gt; band.common_name === inputs.common_band_name)\n</pre> <pre>              );\n</pre> <pre>              if (!bandKey) {\n</pre> <pre>                throw new Error(`No valid asset found for band: ${inputs.common_band_name}`);\n</pre> <pre>              }\n</pre> <pre>              return assets[bandKey].href;\n</pre> <pre>            }\n</pre> <pre>  - class: CommandLineTool\n</pre> <pre>    id: rio_stack\n</pre> <pre>    requirements:\n</pre> <pre>      DockerRequirement:\n</pre> <pre>        dockerPull: ghcr.io/eoap/how-to/rio:1.0.0\n</pre> <pre>      EnvVarRequirement:\n</pre> <pre>        envDef:\n</pre> <pre>          GDAL_TIFF_INTERNAL_MASK: YES\n</pre> <pre>          GDAL_HTTP_MERGE_CONSECUTIVE_RANGES: YES\n</pre> <pre>          CPL_VSIL_CURL_ALLOWED_EXTENSIONS: \".tif\"\n</pre> <pre>      InitialWorkDirRequirement:\n</pre> <pre>        listing:\n</pre> <pre>          - entryname: run.sh\n</pre> <pre>            entry: |-\n</pre> <pre>              #!/bin/bash\n</pre> <pre>              rio stack $@\n</pre> <pre>    baseCommand: [\"/bin/bash\", \"run.sh\"]\n</pre> <pre>    arguments:\n</pre> <pre>      - valueFrom: \"${  \\n  var arr = [];\\n  for(var i=0; i&lt;inputs.tiffs.length; i++) {\\n      arr.push(inputs.tiffs[i]); \\n  }\\n  return arr; \\n  }\\n\"\n</pre> <pre>      - stacked.tif\n</pre> <pre>    inputs:\n</pre> <pre>      tiffs:\n</pre> <pre>        type: string[]\n</pre> <pre>    outputs:\n</pre> <pre>      stacked:\n</pre> <pre>        type: File\n</pre> <pre>        outputBinding:\n</pre> <pre>          glob: stacked.tif\n</pre> <pre>  - class: CommandLineTool\n</pre> <pre>    id: rio_color\n</pre> <pre>    requirements:\n</pre> <pre>      DockerRequirement:\n</pre> <pre>        dockerPull: ghcr.io/eoap/how-to/rio:1.0.0\n</pre> <pre>      InitialWorkDirRequirement:\n</pre> <pre>        listing:\n</pre> <pre>          - entryname: run.sh\n</pre> <pre>            entry: |-\n</pre> <pre>              #!/bin/bash\n</pre> <pre>              rio color -j -1 --out-dtype uint8 $1 rgb.tif \"gamma 3 0.95, sigmoidal rgb 35 0.13\"\n</pre> <pre>    baseCommand: [\"/bin/bash\", \"run.sh\"]\n</pre> <pre>    arguments:\n</pre> <pre>      - $( inputs.stacked.path )\n</pre> <pre>    inputs:\n</pre> <pre>      stacked:\n</pre> <pre>        type: File\n</pre> <pre>    outputs:\n</pre> <pre>      rgb:\n</pre> <pre>        type: File\n</pre> <pre>        outputBinding:\n</pre> <pre>          glob: rgb.tif\n</pre> <p>Graphical representation:</p> <ol> <li>Run the Workflow</li> </ol> <p>Run the workflow with the following command:</p> <pre>cwltool runtime-file.cwl \\\n  --stac-item https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A \\\n  --bands red \\\n  --bands green \\\n  --bands blue\n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.3/x64/bin/cwltool 3.1.20250110105449\n</pre> <pre>INFO Resolved '../cwl-workflows/runtime-file.cwl' to 'file:///home/runner/work/how-to/how-to/cwl-workflows/runtime-file.cwl'\n</pre> <pre>INFO [workflow ] start\n</pre> <pre>INFO [workflow ] starting step step_curl\n</pre> <pre>INFO [step step_curl] start\n</pre> <pre>INFO [job step_curl] /tmp/512t_7s9$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/512t_7s9,target=/QKdTXN \\\n</pre> <pre>    --mount=type=bind,source=/tmp/szvap4h7,target=/tmp \\\n</pre> <pre>    --workdir=/QKdTXN \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/m99a85zl/20250620072003-458470.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/QKdTXN \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/512t_7s9/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10156  100 10156    0     0  62852      0 --:--:-- --:--:-- --:--:-- 63080\n</pre> <pre>INFO [job step_curl] completed success\n</pre> <pre>INFO [step step_curl] start\n</pre> <pre>INFO [job step_curl_2] /tmp/xjffa47j$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/xjffa47j,target=/QKdTXN \\\n</pre> <pre>    --mount=type=bind,source=/tmp/ydbzzqx4,target=/tmp \\\n</pre> <pre>    --workdir=/QKdTXN \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/6qc__ldf/20250620072004-465669.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/QKdTXN \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/xjffa47j/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10156  100 10156    0     0  32627      0 --:--:-- --:--:-- --:--:-- 32655\n</pre> <pre>INFO [job step_curl_2] completed success\n</pre> <pre>INFO [step step_curl] start\n</pre> <pre>INFO [job step_curl_3] /tmp/nokz76j5$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/nokz76j5,target=/QKdTXN \\\n</pre> <pre>    --mount=type=bind,source=/tmp/ajtt_ptt,target=/tmp \\\n</pre> <pre>    --workdir=/QKdTXN \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/aqe_082j/20250620072005-472792.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/QKdTXN \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/nokz76j5/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10156  100 10156    0     0  53916      0 --:--:-- --:--:-- --:--:-- 54021\n</pre> <pre>INFO [job step_curl_3] completed success\n</pre> <pre>INFO [step step_curl] completed success\n</pre> <pre>INFO [workflow ] starting step step_stack\n</pre> <pre>INFO [step step_stack] start\n</pre> <pre>INFO [job step_stack] /tmp/on6baw_r$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/on6baw_r,target=/QKdTXN \\\n</pre> <pre>    --mount=type=bind,source=/tmp/6s_9nz_0,target=/tmp \\\n</pre> <pre>    --workdir=/QKdTXN \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/yy5rppvw/20250620072006-493196.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/QKdTXN \\\n</pre> <pre>    --env=CPL_VSIL_CURL_ALLOWED_EXTENSIONS=.tif \\\n</pre> <pre>    --env=GDAL_HTTP_MERGE_CONSECUTIVE_RANGES=YES \\\n</pre> <pre>    --env=GDAL_TIFF_INTERNAL_MASK=YES \\\n</pre> <pre>    ghcr.io/eoap/how-to/rio:1.0.0 \\\n</pre> <pre>    /bin/bash \\\n</pre> <pre>    run.sh \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B04.tif \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B03.tif \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B02.tif \\\n</pre> <pre>    stacked.tif\n</pre> <pre>INFO [job step_stack] Max memory used: 1281MiB\n</pre> <pre>INFO [job step_stack] completed success\n</pre> <pre>INFO [step step_stack] completed success\n</pre> <pre>INFO [workflow ] starting step step_color\n</pre> <pre>INFO [step step_color] start\n</pre> <pre>INFO [job step_color] /tmp/e6l9yjuo$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/e6l9yjuo,target=/QKdTXN \\\n</pre> <pre>    --mount=type=bind,source=/tmp/ipkr8q24,target=/tmp \\\n</pre> <pre>    --mount=type=bind,source=/tmp/on6baw_r/stacked.tif,target=/var/lib/cwl/stg660feec5-9086-4f85-a010-eedd9a9b8eee/stacked.tif,readonly \\\n</pre> <pre>    --workdir=/QKdTXN \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/wqhbm494/20250620072027-356593.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/QKdTXN \\\n</pre> <pre>    ghcr.io/eoap/how-to/rio:1.0.0 \\\n</pre> <pre>    /bin/bash \\\n</pre> <pre>    run.sh \\\n</pre> <pre>    /var/lib/cwl/stg660feec5-9086-4f85-a010-eedd9a9b8eee/stacked.tif\n</pre> <pre>INFO [job step_color] Max memory used: 742MiB\n</pre> <pre>INFO [job step_color] completed success\n</pre> <pre>INFO [step step_color] completed success\n</pre> <pre>INFO [workflow ] completed success\n</pre> <pre>INFO Final process status is success\n</pre> <ol> <li>Expected Output</li> </ol> <ul> <li>Final Output (rgb.tif): An RGB TIFF file generated by the rio_color tool.</li> </ul> <pre>{\n</pre> <pre>  \"rgb-tif\": {\n</pre> <pre>    \"location\": \"file:///home/runner/work/how-to/how-to/docs/rgb.tif\",\n</pre> <pre>    \"basename\": \"rgb.tif\",\n</pre> <pre>    \"class\": \"File\",\n</pre> <pre>    \"checksum\": \"sha1$1be3372cc826482bc689219f417971852b209460\",\n</pre> <pre>    \"size\": 361747464,\n</pre> <pre>    \"path\": \"/home/runner/work/how-to/how-to/docs/rgb.tif\"\n</pre> <pre>  }\n</pre> <pre>}\n</pre>"},{"location":"runtime-file/#how-to-guide-creating-files-at-runtime","title":"How-to Guide: Creating Files at Runtime\u00b6","text":"<p>This guide explains how to create files dynamically at runtime in a CWL workflow using the <code>InitialWorkDirRequirement</code>.</p> <p>The focus will be on defining a shell script (<code>run.sh</code>) as part of the workflow to handle runtime commands.</p>"},{"location":"runtime-file/#objective","title":"Objective\u00b6","text":"<p>Dynamically create a <code>run.sh</code> script at runtime that executes specific commands for each tool in the workflow.</p>"},{"location":"runtime-file/#steps","title":"Steps\u00b6","text":"<ol> <li>Understand the Workflow Structure</li> </ol> <p>The workflow (<code>runtime-file.cwl</code>) processes a Sentinel-2 STAC item to:</p> <ul> <li>Fetch band URLs (<code>stac</code> tool).</li> <li>Stack TIFFs (<code>rio_stack</code> tool) using a runtime script.</li> <li>Apply color correction (<code>rio_color</code> tool) using another runtime script.</li> </ul>"},{"location":"runtime-file/#key-takeaways","title":"Key Takeaways\u00b6","text":"<ol> <li><code>InitialWorkDirRequirement</code>:</li> </ol> <ul> <li>Dynamically creates files like scripts or configuration files.</li> <li>Use entryname to define the file name and entry for the content.</li> </ul> <ol> <li>Flexibility:</li> </ol> <ul> <li>Simplifies command-line definitions by embedding logic in runtime scripts.</li> </ul> <p>This approach allows you to customize workflows with runtime behavior using dynamically created files.</p>"},{"location":"scatter-input-parameters/","title":"How-to Guide: Scattering on Input Parameters","text":"<pre>requirements:\n</pre> <pre>  ScatterFeatureRequirement: {}\n</pre> <ol> <li><code>MultipleInputFeatureRequirement</code></li> </ol> <p>Allows using multiple input fields in a workflow.</p> <pre>requirements:\n</pre> <pre>  MultipleInputFeatureRequirement: {}\n</pre> <ol> <li>Scatter on <code>common_band_name</code></li> </ol> <p>Scatters the <code>step_curl</code> task based on the <code>common_band_name</code> parameter array.</p> <pre>in:\n</pre> <pre>  stac_item: stac-item\n</pre> <pre>  common_band_name: [red-band, green-band, blue-band]\n</pre> <pre>out:\n</pre> <pre>  - hrefs\n</pre> <pre>run: \"#stac\"\n</pre> <pre>scatter: common_band_name\n</pre> <pre>scatterMethod: dotproduct\n</pre> <pre>cwlVersion: v1.2\n</pre> <pre>$graph:\n</pre> <pre>  - class: Workflow\n</pre> <pre>    id: main\n</pre> <pre>    requirements:\n</pre> <pre>      InlineJavascriptRequirement: {}\n</pre> <pre>      NetworkAccess:\n</pre> <pre>        networkAccess: true\n</pre> <pre>      ScatterFeatureRequirement: {}\n</pre> <pre>      MultipleInputFeatureRequirement: {}\n</pre> <pre>    inputs:\n</pre> <pre>      stac-item:\n</pre> <pre>        type: string\n</pre> <pre>      red-band:\n</pre> <pre>        type: string\n</pre> <pre>        default: \"red\"\n</pre> <pre>      green-band:\n</pre> <pre>        type: string\n</pre> <pre>        default: \"green\"\n</pre> <pre>      blue-band:\n</pre> <pre>        type: string\n</pre> <pre>        default: \"blue\"\n</pre> <pre>    outputs:\n</pre> <pre>      rgb-tif:\n</pre> <pre>        outputSource: step_color/rgb\n</pre> <pre>        type: File\n</pre> <pre>    steps:\n</pre> <pre>      step_curl:\n</pre> <pre>        in:\n</pre> <pre>          stac_item: stac-item\n</pre> <pre>          common_band_name: [red-band, green-band, blue-band]\n</pre> <pre>        out:\n</pre> <pre>          - hrefs\n</pre> <pre>        run: \"#stac\"\n</pre> <pre>        scatter: common_band_name\n</pre> <pre>        scatterMethod: dotproduct\n</pre> <pre>      step_stack:\n</pre> <pre>        in:\n</pre> <pre>          tiffs:\n</pre> <pre>            source: step_curl/hrefs\n</pre> <pre>        out:\n</pre> <pre>          - stacked\n</pre> <pre>        run: \"#rio_stack\"\n</pre> <pre>      step_color:\n</pre> <pre>        in:\n</pre> <pre>          stacked:\n</pre> <pre>            source: step_stack/stacked\n</pre> <pre>        out:\n</pre> <pre>          - rgb\n</pre> <pre>        run: \"#rio_color\"\n</pre> <pre>  - class: CommandLineTool\n</pre> <pre>    id: stac\n</pre> <pre>    requirements:\n</pre> <pre>      DockerRequirement:\n</pre> <pre>        dockerPull: docker.io/curlimages/curl:latest\n</pre> <pre>    baseCommand: curl\n</pre> <pre>    stdout: message\n</pre> <pre>    arguments:\n</pre> <pre>      - $( inputs.stac_item )\n</pre> <pre>    inputs:\n</pre> <pre>      stac_item:\n</pre> <pre>        type: string\n</pre> <pre>      common_band_name:\n</pre> <pre>        type: string\n</pre> <pre>    outputs:\n</pre> <pre>      hrefs:\n</pre> <pre>        type: string\n</pre> <pre>        outputBinding:\n</pre> <pre>          glob: message\n</pre> <pre>          loadContents: true\n</pre> <pre>          outputEval: |\n</pre> <pre>            ${\n</pre> <pre>              const assets = JSON.parse(self[0].contents).assets;\n</pre> <pre>              const bandKey = Object.keys(assets).find(key =&gt;\n</pre> <pre>                assets[key]['eo:bands'] &amp;&amp;\n</pre> <pre>                assets[key]['eo:bands'].length === 1 &amp;&amp;\n</pre> <pre>                assets[key]['eo:bands'].some(band =&gt; band.common_name === inputs.common_band_name)\n</pre> <pre>              );\n</pre> <pre>              if (!bandKey) {\n</pre> <pre>                throw new Error(`No valid asset found for band: ${inputs.common_band_name}`);\n</pre> <pre>              }\n</pre> <pre>              return assets[bandKey].href;\n</pre> <pre>            }\n</pre> <pre>  - class: CommandLineTool\n</pre> <pre>    id: rio_stack\n</pre> <pre>    requirements:\n</pre> <pre>      DockerRequirement:\n</pre> <pre>        dockerPull: ghcr.io/eoap/how-to/rio:1.0.0\n</pre> <pre>      EnvVarRequirement:\n</pre> <pre>        envDef:\n</pre> <pre>          GDAL_TIFF_INTERNAL_MASK: YES\n</pre> <pre>          GDAL_HTTP_MERGE_CONSECUTIVE_RANGES: YES\n</pre> <pre>          CPL_VSIL_CURL_ALLOWED_EXTENSIONS: \".tif\"\n</pre> <pre>      InitialWorkDirRequirement:\n</pre> <pre>        listing:\n</pre> <pre>          - entryname: run.sh\n</pre> <pre>            entry: |-\n</pre> <pre>              #!/bin/bash\n</pre> <pre>              rio stack $@\n</pre> <pre>    baseCommand: [\"/bin/bash\", \"run.sh\"]\n</pre> <pre>    arguments:\n</pre> <pre>      - valueFrom: \"${  \\n  var arr = [];\\n  for(var i=0; i&lt;inputs.tiffs.length; i++) {\\n      arr.push(inputs.tiffs[i]); \\n  }\\n  return arr; \\n  }\\n\"\n</pre> <pre>      - stacked.tif\n</pre> <pre>    inputs:\n</pre> <pre>      tiffs:\n</pre> <pre>        type: string[]\n</pre> <pre>    outputs:\n</pre> <pre>      stacked:\n</pre> <pre>        type: File\n</pre> <pre>        outputBinding:\n</pre> <pre>          glob: stacked.tif\n</pre> <pre>  - class: CommandLineTool\n</pre> <pre>    id: rio_color\n</pre> <pre>    requirements:\n</pre> <pre>      DockerRequirement:\n</pre> <pre>        dockerPull: ghcr.io/eoap/how-to/rio:1.0.0\n</pre> <pre>      InitialWorkDirRequirement:\n</pre> <pre>        listing:\n</pre> <pre>          - entryname: run.sh\n</pre> <pre>            entry: |-\n</pre> <pre>              #!/bin/bash\n</pre> <pre>              rio color -j -1 --out-dtype uint8 $1 rgb.tif \"gamma 3 0.95, sigmoidal rgb 35 0.13\"\n</pre> <pre>    baseCommand: [\"/bin/bash\", \"run.sh\"]\n</pre> <pre>    arguments:\n</pre> <pre>      - $( inputs.stacked.path )\n</pre> <pre>    inputs:\n</pre> <pre>      stacked:\n</pre> <pre>        type: File\n</pre> <pre>    outputs:\n</pre> <pre>      rgb:\n</pre> <pre>        type: File\n</pre> <pre>        outputBinding:\n</pre> <pre>          glob: rgb.tif\n</pre> <p>Its graphical representation:</p> <ol> <li>Scatter Configuration</li> </ol> <ul> <li>Step 1: Scatter on <code>common_band_name</code></li> </ul> <p>The <code>step_curl</code> step scatters over the <code>common_band_name</code> parameter array (<code>[red-band, green-band, blue-band]</code>).</p> <pre>in:\n</pre> <pre>  stac_item: stac-item\n</pre> <pre>  common_band_name: [red-band, green-band, blue-band]\n</pre> <pre>out:\n</pre> <pre>  - hrefs\n</pre> <pre>run: \"#stac\"\n</pre> <pre>scatter: common_band_name\n</pre> <pre>scatterMethod: dotproduct\n</pre> <ul> <li><code>scatter</code>: Scatters the step over the values of <code>common_band_name</code>.</li> <li><code>scatterMethod: dotproduct</code>: Matches corresponding elements in the array for parallel execution.</li> </ul> <p>Step 2: Combine Results</p> <p>The <code>step_stack</code> step combines the TIFF files fetched by <code>step_curl.</code></p> <pre>in:\n</pre> <pre>  tiffs:\n</pre> <pre>    source: step_curl/hrefs\n</pre> <pre>out:\n</pre> <pre>  - stacked\n</pre> <pre>run: \"#rio_stack\"\n</pre> <ol> <li>Substeps and Tools</li> </ol> <p><code>stac</code> Tool</p> <ul> <li>Fetches URLs of the TIFF files corresponding to each band.</li> </ul> <p><code>rio_stack</code> Tool</p> <ul> <li>Stacks the TIFF files into a single composite file.</li> </ul> <ol> <li>Run the Workflow</li> </ol> <p>Execute the workflow with the default parameters:</p> <pre>cwltool scatter-input-parameters.cwl \\\n    --stac-item https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A\n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.3/x64/bin/cwltool 3.1.20250110105449\n</pre> <pre>INFO Resolved '../cwl-workflows/scatter-input-parameters.cwl' to 'file:///home/runner/work/how-to/how-to/cwl-workflows/scatter-input-parameters.cwl'\n</pre> <pre>INFO [workflow ] start\n</pre> <pre>INFO [workflow ] starting step step_curl\n</pre> <pre>INFO [step step_curl] start\n</pre> <pre>INFO [job step_curl] /tmp/pjim30c_$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/pjim30c_,target=/immwZn \\\n</pre> <pre>    --mount=type=bind,source=/tmp/w076lvqq,target=/tmp \\\n</pre> <pre>    --workdir=/immwZn \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/x8kvg4tx/20250620072043-011732.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/immwZn \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/pjim30c_/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10156  100 10156    0     0  28588      0 --:--:-- --:--:-- --:--:-- 28528\r</pre> <pre>100 10156  100 10156    0     0  28582      0 --:--:-- --:--:-- --:--:-- 28528\n</pre> <pre>INFO [job step_curl] completed success\n</pre> <pre>INFO [step step_curl] start\n</pre> <pre>INFO [job step_curl_2] /tmp/9u3r00yd$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/9u3r00yd,target=/immwZn \\\n</pre> <pre>    --mount=type=bind,source=/tmp/pmd8at18,target=/tmp \\\n</pre> <pre>    --workdir=/immwZn \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/bj_7ok79/20250620072044-019069.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/immwZn \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/9u3r00yd/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10156  100 10156    0     0  46062      0 --:--:-- --:--:-- --:--:-- 46163\n</pre> <pre>INFO [job step_curl_2] completed success\n</pre> <pre>INFO [step step_curl] start\n</pre> <pre>INFO [job step_curl_3] /tmp/slsb0sya$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/slsb0sya,target=/immwZn \\\n</pre> <pre>    --mount=type=bind,source=/tmp/xf1wb7_f,target=/tmp \\\n</pre> <pre>    --workdir=/immwZn \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/qv_0qywn/20250620072045-026504.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/immwZn \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/slsb0sya/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10156  100 10156    0     0  58413      0 --:--:-- --:--:-- --:--:-- 58705\n</pre> <pre>INFO [job step_curl_3] completed success\n</pre> <pre>INFO [step step_curl] completed success\n</pre> <pre>INFO [workflow ] starting step step_stack\n</pre> <pre>INFO [step step_stack] start\n</pre> <pre>INFO [job step_stack] /tmp/eyszqcz_$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/eyszqcz_,target=/immwZn \\\n</pre> <pre>    --mount=type=bind,source=/tmp/5rrkbtid,target=/tmp \\\n</pre> <pre>    --workdir=/immwZn \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/0xnzhw20/20250620072046-046081.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/immwZn \\\n</pre> <pre>    --env=CPL_VSIL_CURL_ALLOWED_EXTENSIONS=.tif \\\n</pre> <pre>    --env=GDAL_HTTP_MERGE_CONSECUTIVE_RANGES=YES \\\n</pre> <pre>    --env=GDAL_TIFF_INTERNAL_MASK=YES \\\n</pre> <pre>    ghcr.io/eoap/how-to/rio:1.0.0 \\\n</pre> <pre>    /bin/bash \\\n</pre> <pre>    run.sh \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B04.tif \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B03.tif \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B02.tif \\\n</pre> <pre>    stacked.tif\n</pre> <pre>INFO [job step_stack] Max memory used: 1249MiB\n</pre> <pre>INFO [job step_stack] completed success\n</pre> <pre>INFO [step step_stack] completed success\n</pre> <pre>INFO [workflow ] starting step step_color\n</pre> <pre>INFO [step step_color] start\n</pre> <pre>INFO [job step_color] /tmp/d8xs8_i9$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/d8xs8_i9,target=/immwZn \\\n</pre> <pre>    --mount=type=bind,source=/tmp/tn80e284,target=/tmp \\\n</pre> <pre>    --mount=type=bind,source=/tmp/eyszqcz_/stacked.tif,target=/var/lib/cwl/stg8f936c6e-9afb-4620-b18a-09db34efa67d/stacked.tif,readonly \\\n</pre> <pre>    --workdir=/immwZn \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/yq40jdiv/20250620072104-328838.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/immwZn \\\n</pre> <pre>    ghcr.io/eoap/how-to/rio:1.0.0 \\\n</pre> <pre>    /bin/bash \\\n</pre> <pre>    run.sh \\\n</pre> <pre>    /var/lib/cwl/stg8f936c6e-9afb-4620-b18a-09db34efa67d/stacked.tif\n</pre> <pre>INFO [job step_color] Max memory used: 746MiB\n</pre> <pre>INFO [job step_color] completed success\n</pre> <pre>INFO [step step_color] completed success\n</pre> <pre>INFO [workflow ] completed success\n</pre> <pre>INFO Final process status is success\n</pre> <ol> <li>Expected Output</li> </ol> <p>Intermediate Outputs:</p> <ul> <li><code>hrefs</code>: URLs of the TIFF files for <code>red</code>, <code>green</code>, and <code>blue</code> bands.</li> <li><code>stacked.tif</code>: Composite TIFF file of all bands.</li> </ul> <p>Final Output:</p> <ul> <li><code>rgb-tif</code>: RGB composite TIFF file.</li> </ul> <pre>{\n</pre> <pre>  \"rgb-tif\": {\n</pre> <pre>    \"location\": \"file:///home/runner/work/how-to/how-to/docs/rgb.tif\",\n</pre> <pre>    \"basename\": \"rgb.tif\",\n</pre> <pre>    \"class\": \"File\",\n</pre> <pre>    \"checksum\": \"sha1$87fea93a525287654a6e23e5b031fdb64e379094\",\n</pre> <pre>    \"size\": 361747464,\n</pre> <pre>    \"path\": \"/home/runner/work/how-to/how-to/docs/rgb.tif\"\n</pre> <pre>  }\n</pre> <pre>}\n</pre>"},{"location":"scatter-input-parameters/#how-to-guide-scattering-on-input-parameters","title":"How-to Guide: Scattering on Input Parameters\u00b6","text":"<p>This guide explains how to scatter workflow steps based on input parameters using <code>ScatterFeatureRequirement</code> and <code>MultipleInputFeatureRequirement</code>.</p> <p>The focus is on creating workflows where multiple input parameters are processed in parallel.</p>"},{"location":"scatter-input-parameters/#objective","title":"Objective\u00b6","text":"<p>Scatter the <code>step_curl</code> task to process multiple input bands (<code>red</code>, <code>green</code>, <code>blue</code>) in parallel and combine their results in subsequent steps.</p>"},{"location":"scatter-input-parameters/#key-features","title":"Key Features\u00b6","text":"<ol> <li><code>ScatterFeatureRequirement</code></li> </ol> <p>Enables scattering, allowing parallel execution of workflow steps for array-like inputs.</p>"},{"location":"scatter-input-parameters/#steps","title":"Steps\u00b6","text":"<ol> <li>Define the Workflow</li> </ol> <p>The workflow uses default input values for the band names (<code>red</code>, <code>green</code>, <code>blue</code>) and processes them using scattering.</p> <p>Workflow Inputs</p> <p>The workflow accepts:</p> <ul> <li><code>stac-item</code>: URL of a STAC item.</li> <li><code>red-band</code>: Band name for the red channel (default: <code>\"red\"</code>).</li> <li><code>green-band</code>: Band name for the green channel (default: <code>\"green\"</code>).</li> <li><code>blue-band</code>: Band name for the blue channel (default: <code>\"blue\"</code>).</li> </ul> <p>Workflow Outputs</p> <ul> <li>The final output is the RGB composite TIFF file (<code>rgb-tif</code>).</li> </ul> <p>Workflow Definition</p>"},{"location":"scatter-input-parameters/#key-takeaways","title":"Key Takeaways\u00b6","text":"<p>Scattering with Input Parameters:</p> <ul> <li>The <code>scatter</code> field enables parallel execution over array inputs.</li> <li><code>scatterMethod: dotproduct</code> ensures corresponding elements in arrays are processed together.</li> </ul> <p>Multiple Input Fields:</p> <ul> <li><code>MultipleInputFeatureRequirement</code> allows combining multiple input parameters in a single scatter operation.</li> </ul> <p>Parallel and Modular Design:</p> <ul> <li>Scattering simplifies workflows by enabling parallel processing of input parameters.</li> </ul> <p>This guide demonstrates how to use scattering to process multiple input parameters in parallel within a CWL workflow.</p>"},{"location":"scatter-workflows/","title":"How-to Guide: Scattering Workflows","text":"<pre>requirements:\n</pre> <pre>  ScatterFeatureRequirement: {}\n</pre> <p>This makes it possible to process an array of inputs independently, where each item is executed as a separate job.</p> <ol> <li><code>Scatter</code> and <code>ScatterMethod</code></li> </ol> <ul> <li><code>scatter</code>: Specifies the input field(s) to be scattered.</li> <li><code>scatterMethod</code>: Defines how the inputs are combined when multiple fields are scattered:<ul> <li><code>dotproduct</code>: Matches corresponding elements of input arrays (e.g., the first element of each array is processed together).</li> <li><code>nested_crossproduct</code>: Creates a Cartesian product of inputs, producing combinations of all elements.</li> <li><code>flat_crossproduct</code>: Similar to <code>nested_crossproduct</code> but flattens the structure of results.</li> </ul> </li> </ul> <pre>step_rgb_composite:\n</pre> <pre>  in:\n</pre> <pre>    stac-item: stac-items\n</pre> <pre>    bands: bands\n</pre> <pre>  out:\n</pre> <pre>    - rgb-tif\n</pre> <pre>  run: \"#rgb-composite\"\n</pre> <pre>  scatter: stac-item\n</pre> <pre>  scatterMethod: dotproduct\n</pre> <ul> <li><code>scatter: stac-item</code>: The <code>stac-item</code> array is scattered, creating one subworkflow execution per item.</li> <li><code>scatterMethod: dotproduct</code>: Matches each <code>stac-item</code> with the same bands input for each subworkflow execution.</li> </ul> <pre>class: Workflow\n</pre> <pre>id: main\n</pre> <pre>requirements:\n</pre> <pre>  SubworkflowFeatureRequirement: {}\n</pre> <pre>  InlineJavascriptRequirement: {}\n</pre> <pre>  NetworkAccess:\n</pre> <pre>    networkAccess: true\n</pre> <pre>  ScatterFeatureRequirement: {}\n</pre> <pre>inputs:\n</pre> <pre>  stac-items:\n</pre> <pre>    type: string[]\n</pre> <pre>  bands:\n</pre> <pre>    type: string[]\n</pre> <pre>    default: [\"red\", \"green\", \"blue\"]\n</pre> <pre>outputs:\n</pre> <pre>  rgb-tif:\n</pre> <pre>    outputSource: step_rgb_composite/rgb-tif\n</pre> <pre>    type: File[]\n</pre> <pre>steps:\n</pre> <pre>  step_rgb_composite:\n</pre> <pre>    in:\n</pre> <pre>      stac-item: stac-items\n</pre> <pre>      bands: bands\n</pre> <pre>    out:\n</pre> <pre>      - rgb-tif\n</pre> <pre>    run: \"#rgb-composite\"\n</pre> <pre>    scatter: stac-item\n</pre> <pre>    scatterMethod: dotproduct\n</pre> <p>Its graphical representation:</p> <p>Inputs:</p> <ul> <li><code>stac-items</code>: An array of URLs to STAC items.</li> <li><code>bands</code>: Array of band names (<code>default: [\"red\", \"green\", \"blue\"]</code>).</li> </ul> <p>Output:</p> <ul> <li><code>rgb-tif</code>: An array of RGB TIFF files (one per <code>stac-item</code>).</li> </ul> <p>Steps:</p> <ul> <li><code>step_rgb_composite</code>: Calls the rgb-composite subworkflow with scattered stac-items.</li> </ul> <ol> <li>Define the Subworkflow</li> </ol> <p>The subworkflow (<code>rgb-composite</code>) processes a single stac-item to create an RGB composite:</p> <p>Subworkflow Definition</p> <pre>class: Workflow\n</pre> <pre>id: rgb-composite\n</pre> <pre>requirements:\n</pre> <pre>  InlineJavascriptRequirement: {}\n</pre> <pre>  NetworkAccess:\n</pre> <pre>    networkAccess: true\n</pre> <pre>  ScatterFeatureRequirement: {}\n</pre> <pre>inputs:\n</pre> <pre>  stac-item:\n</pre> <pre>    type: string\n</pre> <pre>  bands:\n</pre> <pre>    type: string[]\n</pre> <pre>outputs:\n</pre> <pre>  rgb-tif:\n</pre> <pre>    outputSource: step_color/rgb\n</pre> <pre>    type: File\n</pre> <pre>steps:\n</pre> <pre>  step_curl:\n</pre> <pre>    in:\n</pre> <pre>      stac_item: stac-item\n</pre> <pre>      common_band_name: bands\n</pre> <pre>    out:\n</pre> <pre>      - hrefs\n</pre> <pre>    run: \"#stac\"\n</pre> <pre>    scatter: common_band_name\n</pre> <pre>    scatterMethod: dotproduct\n</pre> <pre>  step_stack:\n</pre> <pre>    in:\n</pre> <pre>      tiffs:\n</pre> <pre>        source: step_curl/hrefs\n</pre> <pre>    out:\n</pre> <pre>      - stacked\n</pre> <pre>    run: \"#rio_stack\"\n</pre> <pre>  step_color:\n</pre> <pre>    in:\n</pre> <pre>      stacked:\n</pre> <pre>        source: step_stack/stacked\n</pre> <pre>    out:\n</pre> <pre>      - rgb\n</pre> <pre>    run: \"#rio_color\"\n</pre> <p>Its graphical representation:</p> <p>Scatter in Subworkflow:</p> <ul> <li><code>step_curl</code> scatters bands (e.g., <code>red</code>, <code>green</code>, <code>blue</code>).</li> <li>Each band is processed independently to retrieve its corresponding asset.</li> </ul> <ol> <li>Run the Workflow</li> </ol> <p>Execute the main workflow with multiple stac-items:</p> <pre>cwltool scatter-workflows.cwl \\\n    --stac-item https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A \\\n    --stac-item https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2A_53HPA_20210728_0_L2A\n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.3/x64/bin/cwltool 3.1.20250110105449\n</pre> <pre>INFO Resolved '../cwl-workflows/scatter-workflows.cwl' to 'file:///home/runner/work/how-to/how-to/cwl-workflows/scatter-workflows.cwl'\n</pre> <pre>INFO [workflow ] start\n</pre> <pre>INFO [workflow ] starting step step_rgb_composite\n</pre> <pre>INFO [step step_rgb_composite] start\n</pre> <pre>INFO [workflow step_rgb_composite] start\n</pre> <pre>INFO [workflow step_rgb_composite] starting step step_curl\n</pre> <pre>INFO [step step_curl] start\n</pre> <pre>INFO [job step_curl] /tmp/l1d1o7f_$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/l1d1o7f_,target=/Ofekkn \\\n</pre> <pre>    --mount=type=bind,source=/tmp/o0zspszr,target=/tmp \\\n</pre> <pre>    --workdir=/Ofekkn \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/r1xzcfnd/20250620072123-919885.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/Ofekkn \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/l1d1o7f_/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10156  100 10156    0     0  46912      0 --:--:-- --:--:-- --:--:-- 47018\n</pre> <pre>INFO [job step_curl] completed success\n</pre> <pre>INFO [step step_curl] start\n</pre> <pre>INFO [job step_curl_2] /tmp/ke9anrfr$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/ke9anrfr,target=/Ofekkn \\\n</pre> <pre>    --mount=type=bind,source=/tmp/r232vb81,target=/tmp \\\n</pre> <pre>    --workdir=/Ofekkn \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/2tp8fddq/20250620072124-926643.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/Ofekkn \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/ke9anrfr/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10156  100 10156    0     0  48754      0 --:--:-- --:--:-- --:--:-- 48826\n</pre> <pre>INFO [job step_curl_2] completed success\n</pre> <pre>INFO [step step_curl] start\n</pre> <pre>INFO [job step_curl_3] /tmp/gzyv9yyp$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/gzyv9yyp,target=/Ofekkn \\\n</pre> <pre>    --mount=type=bind,source=/tmp/ofjq88n3,target=/tmp \\\n</pre> <pre>    --workdir=/Ofekkn \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/gxreazrj/20250620072125-933658.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/Ofekkn \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A &gt; /tmp/gzyv9yyp/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10156  100 10156    0     0  45458      0 --:--:-- --:--:-- --:--:-- 45542\n</pre> <pre>INFO [job step_curl_3] completed success\n</pre> <pre>INFO [step step_curl] completed success\n</pre> <pre>INFO [workflow step_rgb_composite] starting step step_stack\n</pre> <pre>INFO [step step_stack] start\n</pre> <pre>INFO [job step_stack] /tmp/c14en5rr$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/c14en5rr,target=/Ofekkn \\\n</pre> <pre>    --mount=type=bind,source=/tmp/f7li9bji,target=/tmp \\\n</pre> <pre>    --workdir=/Ofekkn \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/7xns1jkb/20250620072126-955747.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/Ofekkn \\\n</pre> <pre>    --env=CPL_VSIL_CURL_ALLOWED_EXTENSIONS=.tif \\\n</pre> <pre>    --env=GDAL_HTTP_MERGE_CONSECUTIVE_RANGES=YES \\\n</pre> <pre>    --env=GDAL_TIFF_INTERNAL_MASK=YES \\\n</pre> <pre>    ghcr.io/eoap/how-to/rio:1.0.0 \\\n</pre> <pre>    rio \\\n</pre> <pre>    stack \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B04.tif \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B03.tif \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2B_53HPA_20210723_0_L2A/B02.tif \\\n</pre> <pre>    stacked.tif\n</pre> <pre>INFO [job step_stack] Max memory used: 1250MiB\n</pre> <pre>INFO [job step_stack] completed success\n</pre> <pre>INFO [step step_stack] completed success\n</pre> <pre>INFO [workflow step_rgb_composite] starting step step_color\n</pre> <pre>INFO [step step_color] start\n</pre> <pre>INFO [job step_color] /tmp/cw4hs8fv$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/cw4hs8fv,target=/Ofekkn \\\n</pre> <pre>    --mount=type=bind,source=/tmp/30xkklbm,target=/tmp \\\n</pre> <pre>    --mount=type=bind,source=/tmp/c14en5rr/stacked.tif,target=/var/lib/cwl/stged0b356d-be62-417e-872d-27cdf14907e3/stacked.tif,readonly \\\n</pre> <pre>    --workdir=/Ofekkn \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/b7vadlng/20250620072145-025096.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/Ofekkn \\\n</pre> <pre>    ghcr.io/eoap/how-to/rio:1.0.0 \\\n</pre> <pre>    rio \\\n</pre> <pre>    color \\\n</pre> <pre>    -j \\\n</pre> <pre>    -1 \\\n</pre> <pre>    --out-dtype \\\n</pre> <pre>    uint8 \\\n</pre> <pre>    /var/lib/cwl/stged0b356d-be62-417e-872d-27cdf14907e3/stacked.tif \\\n</pre> <pre>    rgb.tif \\\n</pre> <pre>    'gamma 3 0.95, sigmoidal rgb 35 0.13'\n</pre> <pre>INFO [job step_color] Max memory used: 743MiB\n</pre> <pre>INFO [job step_color] completed success\n</pre> <pre>INFO [step step_color] completed success\n</pre> <pre>INFO [workflow step_rgb_composite] completed success\n</pre> <pre>INFO [step step_rgb_composite] start\n</pre> <pre>INFO [workflow step_rgb_composite_2] start\n</pre> <pre>INFO [workflow step_rgb_composite_2] starting step step_curl_2\n</pre> <pre>INFO [step step_curl_2] start\n</pre> <pre>INFO [job step_curl_4] /tmp/8o0xijxk$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/8o0xijxk,target=/Ofekkn \\\n</pre> <pre>    --mount=type=bind,source=/tmp/4q6y1i8b,target=/tmp \\\n</pre> <pre>    --workdir=/Ofekkn \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/gspoqrg9/20250620072152-403482.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/Ofekkn \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2A_53HPA_20210728_0_L2A &gt; /tmp/8o0xijxk/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10157  100 10157    0     0  35777      0 --:--:-- --:--:-- --:--:-- 35890\n</pre> <pre>INFO [job step_curl_4] completed success\n</pre> <pre>INFO [step step_curl_2] start\n</pre> <pre>INFO [job step_curl_5] /tmp/eoxuaght$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/eoxuaght,target=/Ofekkn \\\n</pre> <pre>    --mount=type=bind,source=/tmp/k3bt7b1j,target=/tmp \\\n</pre> <pre>    --workdir=/Ofekkn \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/g_x6yman/20250620072153-410168.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/Ofekkn \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2A_53HPA_20210728_0_L2A &gt; /tmp/eoxuaght/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10157  100 10157    0     0  44288      0 --:--:-- --:--:-- --:--:-- 44353\n</pre> <pre>INFO [job step_curl_5] completed success\n</pre> <pre>INFO [step step_curl_2] start\n</pre> <pre>INFO [job step_curl_6] /tmp/xfkpmpsq$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/xfkpmpsq,target=/Ofekkn \\\n</pre> <pre>    --mount=type=bind,source=/tmp/gcbiacbz,target=/tmp \\\n</pre> <pre>    --workdir=/Ofekkn \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --log-driver=none \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/7ttf1muz/20250620072154-416697.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/Ofekkn \\\n</pre> <pre>    docker.io/curlimages/curl:latest \\\n</pre> <pre>    curl \\\n</pre> <pre>    https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2A_53HPA_20210728_0_L2A &gt; /tmp/xfkpmpsq/message\n</pre> <pre>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n</pre> <pre>                                 Dload  Upload   Total   Spent    Left  Speed\n</pre> <pre>\r</pre> <pre>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r</pre> <pre>100 10157  100 10157    0     0  44506      0 --:--:-- --:--:-- --:--:-- 44548\n</pre> <pre>INFO [job step_curl_6] completed success\n</pre> <pre>INFO [step step_curl_2] completed success\n</pre> <pre>INFO [workflow step_rgb_composite_2] starting step step_stack_2\n</pre> <pre>INFO [step step_stack_2] start\n</pre> <pre>INFO [job step_stack_2] /tmp/ptx93hic$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/ptx93hic,target=/Ofekkn \\\n</pre> <pre>    --mount=type=bind,source=/tmp/d19c3__h,target=/tmp \\\n</pre> <pre>    --workdir=/Ofekkn \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/rq_r3zt7/20250620072155-424893.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/Ofekkn \\\n</pre> <pre>    --env=CPL_VSIL_CURL_ALLOWED_EXTENSIONS=.tif \\\n</pre> <pre>    --env=GDAL_HTTP_MERGE_CONSECUTIVE_RANGES=YES \\\n</pre> <pre>    --env=GDAL_TIFF_INTERNAL_MASK=YES \\\n</pre> <pre>    ghcr.io/eoap/how-to/rio:1.0.0 \\\n</pre> <pre>    rio \\\n</pre> <pre>    stack \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2A_53HPA_20210728_0_L2A/B04.tif \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2A_53HPA_20210728_0_L2A/B03.tif \\\n</pre> <pre>    https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/H/PA/2021/7/S2A_53HPA_20210728_0_L2A/B02.tif \\\n</pre> <pre>    stacked.tif\n</pre> <pre>INFO [job step_stack_2] Max memory used: 1292MiB\n</pre> <pre>INFO [job step_stack_2] completed success\n</pre> <pre>INFO [step step_stack_2] completed success\n</pre> <pre>INFO [workflow step_rgb_composite_2] starting step step_color_2\n</pre> <pre>INFO [step step_color_2] start\n</pre> <pre>INFO [job step_color_2] /tmp/h7pmytx7$ docker \\\n</pre> <pre>    run \\\n</pre> <pre>    -i \\\n</pre> <pre>    --mount=type=bind,source=/tmp/h7pmytx7,target=/Ofekkn \\\n</pre> <pre>    --mount=type=bind,source=/tmp/hg69m2nx,target=/tmp \\\n</pre> <pre>    --mount=type=bind,source=/tmp/ptx93hic/stacked.tif,target=/var/lib/cwl/stg8db3fe87-eeeb-4910-8344-5f92be23fe9d/stacked.tif,readonly \\\n</pre> <pre>    --workdir=/Ofekkn \\\n</pre> <pre>    --read-only=true \\\n</pre> <pre>    --user=1001:118 \\\n</pre> <pre>    --rm \\\n</pre> <pre>    --cidfile=/tmp/9o3fynwy/20250620072221-459471.cid \\\n</pre> <pre>    --env=TMPDIR=/tmp \\\n</pre> <pre>    --env=HOME=/Ofekkn \\\n</pre> <pre>    ghcr.io/eoap/how-to/rio:1.0.0 \\\n</pre> <pre>    rio \\\n</pre> <pre>    color \\\n</pre> <pre>    -j \\\n</pre> <pre>    -1 \\\n</pre> <pre>    --out-dtype \\\n</pre> <pre>    uint8 \\\n</pre> <pre>    /var/lib/cwl/stg8db3fe87-eeeb-4910-8344-5f92be23fe9d/stacked.tif \\\n</pre> <pre>    rgb.tif \\\n</pre> <pre>    'gamma 3 0.95, sigmoidal rgb 35 0.13'\n</pre> <pre>INFO [job step_color_2] Max memory used: 737MiB\n</pre> <pre>INFO [job step_color_2] completed success\n</pre> <pre>INFO [step step_color_2] completed success\n</pre> <pre>INFO [workflow step_rgb_composite_2] completed success\n</pre> <pre>INFO [step step_rgb_composite] completed success\n</pre> <pre>INFO [workflow ] completed success\n</pre> <pre>INFO Final process status is success\n</pre> <ol> <li>Expected Output</li> </ol> <p>The workflow creates an array of RGB composite TIFF files, one for each stac-item:</p> <p>Output Files:</p> <ul> <li>rgb-tif[0]: RGB composite for the first stac-item.</li> <li>rgb-tif[1]: RGB composite for the second stac-item.</li> </ul> <pre>{\n</pre> <pre>  \"rgb-tif\": [\n</pre> <pre>    {\n</pre> <pre>      \"location\": \"file:///home/runner/work/how-to/how-to/docs/rgb.tif\",\n</pre> <pre>      \"basename\": \"rgb.tif\",\n</pre> <pre>      \"class\": \"File\",\n</pre> <pre>      \"checksum\": \"sha1$3875bb4c1c460b1b1b7ef6a148cd5655b5732668\",\n</pre> <pre>      \"size\": 361747464,\n</pre> <pre>      \"path\": \"/home/runner/work/how-to/how-to/docs/rgb.tif\"\n</pre> <pre>    },\n</pre> <pre>    {\n</pre> <pre>      \"location\": \"file:///home/runner/work/how-to/how-to/docs/rgb.tif_2\",\n</pre> <pre>      \"basename\": \"rgb.tif\",\n</pre> <pre>      \"class\": \"File\",\n</pre> <pre>      \"checksum\": \"sha1$353cd2a90df035ae48e6c1a313f06b09d9c6143d\",\n</pre> <pre>      \"size\": 361747464,\n</pre> <pre>      \"path\": \"/home/runner/work/how-to/how-to/docs/rgb.tif_2\"\n</pre> <pre>    }\n</pre> <pre>  ]\n</pre> <pre>}\n</pre>"},{"location":"scatter-workflows/#how-to-guide-scattering-workflows","title":"How-to Guide: Scattering Workflows\u00b6","text":"<p>This guide demonstrates how to use scattering in CWL workflows, allowing parallel execution of tasks on multiple inputs.</p> <p>The focus is on the <code>ScatterFeatureRequirement</code> and <code>scatterMethod</code>.</p>"},{"location":"scatter-workflows/#objective","title":"Objective\u00b6","text":"<ul> <li>Execute a subworkflow (rgb-composite) in parallel for multiple stac-items.</li> <li>Scatter the input stac-items to create multiple RGB composite outputs.</li> </ul>"},{"location":"scatter-workflows/#key-concepts","title":"Key Concepts\u00b6","text":"<ol> <li><code>ScatterFeatureRequirement</code></li> </ol> <p>The <code>ScatterFeatureRequirement</code> enables scattering, allowing a step to process multiple inputs in parallel.</p>"},{"location":"scatter-workflows/#steps","title":"Steps\u00b6","text":"<ol> <li>Define the Workflow</li> </ol> <p>The main workflow (<code>scatter-workflows.cwl</code>) processes multiple stac-items in parallel:</p> <p>Workflow Definition:</p>"},{"location":"scatter-workflows/#key-takeaways","title":"Key Takeaways\u00b6","text":"<ol> <li><code>ScatterFeatureRequirement</code>:</li> </ol> <ul> <li>Enables parallel processing of array inputs.</li> </ul> <ol> <li>Scatter and ScatterMethod:</li> </ol> <ul> <li><code>scatter</code>: Specifies the input to scatter.</li> <li><code>scatterMethod</code>:<ul> <li><code>dotproduct</code>: Matches corresponding elements in input arrays.</li> <li><code>nested_crossproduct</code>: Generates all combinations of input elements.</li> </ul> </li> </ul> <p>3 .Scalable Workflows:</p> <ul> <li>Scattering simplifies large-scale processing by distributing tasks over multiple inputs, improving performance and modularity.</li> </ul> <p>This guide demonstrates how scattering in CWL can streamline workflows by enabling parallel execution of steps on array inputs.</p>"}]}